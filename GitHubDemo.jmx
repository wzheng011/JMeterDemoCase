<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UI simulator" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="User Account" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">account.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">userName,password</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="repositoryName" elementType="Argument">
              <stringProp name="Argument.name">repositoryName</stringProp>
              <stringProp name="Argument.value">test</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">github.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">true</boolProp>
        </CacheManager>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think time" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SignIn" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Input URL in Browser" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Load SignIn Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">login</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">8</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                <stringProp name="HtmlExtractor.refname">token</stringProp>
                <stringProp name="HtmlExtractor.expr">input[name=&apos;authenticity_token&apos;]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Page Text" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1312969392">Sign in to GitHub</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="page_view" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2Flogin&amp;dimensions[title]=Sign%20in%20to%20GitHub%20%C2%B7%20GitHub&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x377&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526024796090&amp;dimensions[request_id]=0780%3A55C3%3A557EC3%3A7D1A6E%3A5AF54A57&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-5-5--644-636-636-320-5-5-5---0---6-310-308--307-307&amp;&amp;&amp;dimensions[cid]=1790278635.1476950947</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;features&quot;:{&quot;beacon&quot;:true,&quot;classlist&quot;:true,&quot;classlistMultiArg&quot;:true,&quot;closest&quot;:true,&quot;customElements&quot;:true,&quot;customEvent&quot;:true,&quot;fetch&quot;:true,&quot;highResolutionTime&quot;:true,&quot;matchesSelector&quot;:true,&quot;promises&quot;:true,&quot;stringEndsWith&quot;:true,&quot;stringStartsWith&quot;:true,&quot;timezone&quot;:true,&quot;url&quot;:true,&quot;urlSearchParams&quot;:true,&quot;userTimingEntries&quot;:true,&quot;userTimingMark&quot;:true,&quot;weakmap&quot;:true},&quot;timestamp&quot;:1526024795981},{&quot;resourceTimings&quot;:[{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:328.9999999979045,&quot;domainLookupStart&quot;:328.9999999979045,&quot;domainLookupEnd&quot;:328.9999999979045,&quot;connectStart&quot;:328.9999999979045,&quot;connectEnd&quot;:328.9999999979045,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:328.9999999979045,&quot;responseStart&quot;:328.9999999979045,&quot;responseEnd&quot;:328.9999999979045,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:88465,&quot;decodedBodySize&quot;:253180,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-644046793a9a820484b09b18e7389918.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:328.9999999979045,&quot;duration&quot;:0},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:328.9999999979045,&quot;domainLookupStart&quot;:328.9999999979045,&quot;domainLookupEnd&quot;:328.9999999979045,&quot;connectStart&quot;:328.9999999979045,&quot;connectEnd&quot;:328.9999999979045,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:332.4999999895226,&quot;responseStart&quot;:333.4999999933643,&quot;responseEnd&quot;:335.99999999569263,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:46565,&quot;decodedBodySize&quot;:46565,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/site-7472e7b4603d4095447d49d428375ab8.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:328.9999999979045,&quot;duration&quot;:6.999999997788109},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:328.9999999979045,&quot;domainLookupStart&quot;:328.9999999979045,&quot;domainLookupEnd&quot;:328.9999999979045,&quot;connectStart&quot;:328.9999999979045,&quot;connectEnd&quot;:328.9999999979045,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:331.9999999948777,&quot;responseStart&quot;:332.99999999871943,&quot;responseEnd&quot;:335.99999999569263,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:23122,&quot;decodedBodySize&quot;:113522,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-35bdc21c9cfe5499e25ab7ce9d31a2cc.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:328.9999999979045,&quot;duration&quot;:6.999999997788109},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:328.9999999979045,&quot;domainLookupStart&quot;:328.9999999979045,&quot;domainLookupEnd&quot;:328.9999999979045,&quot;connectStart&quot;:328.9999999979045,&quot;connectEnd&quot;:328.9999999979045,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:331.9999999948777,&quot;responseStart&quot;:332.99999999871943,&quot;responseEnd&quot;:337.99999998882413,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:94138,&quot;decodedBodySize&quot;:402005,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-53c9bcdc66bd65746c42e29457a4e2ab.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:328.9999999979045,&quot;duration&quot;:8.999999990919605},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:328.9999999979045,&quot;domainLookupStart&quot;:328.9999999979045,&quot;domainLookupEnd&quot;:328.9999999979045,&quot;connectStart&quot;:328.9999999979045,&quot;connectEnd&quot;:328.9999999979045,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:341.49999999499414,&quot;responseStart&quot;:341.49999999499414,&quot;responseEnd&quot;:349.99999999126885,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:136371,&quot;decodedBodySize&quot;:476606,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-85fc10e5f867231156677d344e74faa4.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:328.9999999979045,&quot;duration&quot;:20.999999993364327},{&quot;initiatorType&quot;:&quot;css&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:667.0000000012806,&quot;domainLookupStart&quot;:667.0000000012806,&quot;domainLookupEnd&quot;:667.0000000012806,&quot;connectStart&quot;:667.0000000012806,&quot;connectEnd&quot;:667.0000000012806,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:667.0000000012806,&quot;responseStart&quot;:667.0000000012806,&quot;responseEnd&quot;:667.0000000012806,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:13360,&quot;decodedBodySize&quot;:13360,&quot;name&quot;:&quot;https://assets-cdn.github.com/static/fonts/roboto/roboto-light.woff&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:667.0000000012806,&quot;duration&quot;:0},{&quot;initiatorType&quot;:&quot;css&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:673.9999999990687,&quot;domainLookupStart&quot;:673.9999999990687,&quot;domainLookupEnd&quot;:673.9999999990687,&quot;connectStart&quot;:673.9999999990687,&quot;connectEnd&quot;:673.9999999990687,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:673.9999999990687,&quot;responseStart&quot;:673.9999999990687,&quot;responseEnd&quot;:673.9999999990687,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:13308,&quot;decodedBodySize&quot;:13308,&quot;name&quot;:&quot;https://assets-cdn.github.com/static/fonts/roboto/roboto-regular.woff&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:673.9999999990687,&quot;duration&quot;:0},{&quot;initiatorType&quot;:&quot;css&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:673.9999999990687,&quot;domainLookupStart&quot;:673.9999999990687,&quot;domainLookupEnd&quot;:673.9999999990687,&quot;connectStart&quot;:673.9999999990687,&quot;connectEnd&quot;:673.9999999990687,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:673.9999999990687,&quot;responseStart&quot;:673.9999999990687,&quot;responseEnd&quot;:673.9999999990687,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:13248,&quot;decodedBodySize&quot;:13248,&quot;name&quot;:&quot;https://assets-cdn.github.com/static/fonts/roboto/roboto-medium.woff&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:673.9999999990687,&quot;duration&quot;:0},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1145.9999999933643,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:1315.0000000023283,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1145.9999999933643,&quot;duration&quot;:169.00000000896398},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1156.9999999919673,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:1392.9999999963911,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2Flogin&amp;dimensions[title]=Sign%20in%20to%20GitHub%20%C2%B7%20GitHub&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x377&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526024796090&amp;dimensions[request_id]=0780%3A55C3%3A557EC3%3A7D1A6E%3A5AF54A57&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-5-5--644-636-636-320-5-5-5---0---6-310-308--307-307&amp;&amp;&amp;dimensions[cid]=1790278635.1476950947&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1156.9999999919673,&quot;duration&quot;:236.00000000442378}],&quot;timestamp&quot;:1526024796347},{&quot;navigationTimings&quot;:[{&quot;unloadEventStart&quot;:307.0000000006985,&quot;unloadEventEnd&quot;:307.0000000006985,&quot;domInteractive&quot;:635.999999998603,&quot;domContentLoadedEventStart&quot;:635.999999998603,&quot;domContentLoadedEventEnd&quot;:644.0000000002328,&quot;domComplete&quot;:1392.9999999963911,&quot;loadEventStart&quot;:1392.9999999963911,&quot;loadEventEnd&quot;:1394.9999999895226,&quot;type&quot;:&quot;navigate&quot;,&quot;redirectCount&quot;:0,&quot;initiatorType&quot;:&quot;navigation&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:4.999999990104698,&quot;domainLookupStart&quot;:4.999999990104698,&quot;domainLookupEnd&quot;:4.999999990104698,&quot;connectStart&quot;:4.999999990104698,&quot;connectEnd&quot;:4.999999990104698,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:5.999999993946403,&quot;responseStart&quot;:307.9999999899883,&quot;responseEnd&quot;:309.9999999976717,&quot;transferSize&quot;:7239,&quot;encodedBodySize&quot;:4937,&quot;decodedBodySize&quot;:13077,&quot;name&quot;:&quot;https://github.com/login&quot;,&quot;entryType&quot;:&quot;navigation&quot;,&quot;startTime&quot;:0,&quot;duration&quot;:1394.9999999895226}],&quot;timestamp&quot;:1526024796348}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click SignIn Button" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click SignIn Button" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="commit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Sign in</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">commit</stringProp>
                  </elementProp>
                  <elementProp name="authenticity_token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">authenticity_token</stringProp>
                  </elementProp>
                  <elementProp name="login" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${userName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">login</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${password}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
              <stringProp name="HTTPSampler.path">session</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Redirect to Initial Page" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Redirect to Initial Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">findRepositoryName</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//div[@id=&apos;your_repos&apos;]//ul[@class=&apos;mini-repo-list&apos;]//li//span[text()=&apos;${repositoryName}&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">String findRepositoryName = vars.get(&quot;findRepositoryName&quot;);
String createThenDelete = &quot;false&quot;;
String deleteThenCreate = &quot;false&quot;;

// if the repository already exist
if (findRepositoryName!=null &amp;&amp; findRepositoryName.length()!=0)
{
	createThenDelete = &quot;false&quot;;
	deleteThenCreate = &quot;true&quot;;
} else { // if the repository not exist
	createThenDelete = &quot;true&quot;;
	deleteThenCreate = &quot;false&quot;;
}

vars.put(&quot;createThenDelete&quot;, createThenDelete);
vars.put(&quot;deleteThenCreate&quot;, deleteThenCreate);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                <stringProp name="HtmlExtractor.refname">actorID</stringProp>
                <stringProp name="HtmlExtractor.expr">meta[name=&apos;octolytics-actor-id&apos;]</stringProp>
                <stringProp name="HtmlExtractor.attribute">content</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                <stringProp name="HtmlExtractor.refname">actorLogin</stringProp>
                <stringProp name="HtmlExtractor.expr">meta[name=&apos;octolytics-actor-login&apos;]</stringProp>
                <stringProp name="HtmlExtractor.attribute">content</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                <stringProp name="HtmlExtractor.refname">completeWSLink</stringProp>
                <stringProp name="HtmlExtractor.expr">link[rel=&apos;web-socket&apos;]</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">String completeWSLink = vars.get(&quot;completeWSLink&quot;);
String WSPath = completeWSLink.split(&quot;live.github.com/&quot;)[1];

vars.put(&quot;WSPath&quot;, WSPath);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="collect" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=562094810&amp;t=event&amp;ni=1&amp;_s=1&amp;dl=https%3A%2F%2Fgithub.com%2Fdashboard&amp;ul=en-us&amp;de=UTF-8&amp;dt=(masked)&amp;sd=24-bit&amp;sr=1360x857&amp;vp=1343x177&amp;je=0&amp;ec=Hello%20World&amp;ea=linkview&amp;el=Viewed%20Hello%20World&amp;_u=SCCAAEABM~&amp;jid=&amp;cid=194624480.1476950947&amp;tid=UA-3769691-2&amp;cd1=Logged%20In&amp;z=477749839</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">collect</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="collect" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=562094810&amp;t=event&amp;ni=1&amp;_s=2&amp;dl=https%3A%2F%2Fgithub.com%2Fdashboard&amp;ul=en-us&amp;de=UTF-8&amp;dt=(masked)&amp;sd=24-bit&amp;sr=1360x857&amp;vp=1343x177&amp;je=0&amp;ec=Dashboard&amp;ea=load%20broadcast&amp;el=Custom%20domains%20on%20GitHub%20Pages%20gain%20support%20for%20HTTPS&amp;_u=SCCAAEABM~&amp;jid=&amp;cid=194624480.1476950947&amp;tid=UA-3769691-2&amp;cd1=Logged%20In&amp;z=826716438</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">collect</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="page_view" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[title]=GitHub&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Flogin&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x177&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526025464264&amp;dimensions[request_id]=0782%3A77CA%3A5C2965%3A85BFB0%3A5AF54CC7&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-4-4--895-886-886-564-4-4-4---0---4-555-552--551-551&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;features&quot;:{&quot;beacon&quot;:true,&quot;classlist&quot;:true,&quot;classlistMultiArg&quot;:true,&quot;closest&quot;:true,&quot;customElements&quot;:true,&quot;customEvent&quot;:true,&quot;fetch&quot;:true,&quot;highResolutionTime&quot;:true,&quot;matchesSelector&quot;:true,&quot;promises&quot;:true,&quot;stringEndsWith&quot;:true,&quot;stringStartsWith&quot;:true,&quot;timezone&quot;:true,&quot;url&quot;:true,&quot;urlSearchParams&quot;:true,&quot;userTimingEntries&quot;:true,&quot;userTimingMark&quot;:true,&quot;weakmap&quot;:true},&quot;timestamp&quot;:1526367857632},{&quot;resourceTimings&quot;:[{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1005.0000000010186,&quot;domainLookupStart&quot;:1005.0000000010186,&quot;domainLookupEnd&quot;:1005.0000000010186,&quot;connectStart&quot;:1005.0000000010186,&quot;connectEnd&quot;:1005.0000000010186,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1010.5000000003201,&quot;responseStart&quot;:1011.5000000005239,&quot;responseEnd&quot;:1018.0000000000291,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:23478,&quot;decodedBodySize&quot;:115019,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-23c9e7262eee71bc6f67f6950190a162.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1005.0000000010186,&quot;duration&quot;:12.99999999901047},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1005.0000000010186,&quot;domainLookupStart&quot;:1005.0000000010186,&quot;domainLookupEnd&quot;:1005.0000000010186,&quot;connectStart&quot;:1005.0000000010186,&quot;connectEnd&quot;:1005.0000000010186,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1014.9999999994179,&quot;responseStart&quot;:1015.9999999996217,&quot;responseEnd&quot;:1027.9999999984284,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:94004,&quot;decodedBodySize&quot;:400793,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-f3dbefb182d184a7c6bf518633cfcb38.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1005.0000000010186,&quot;duration&quot;:22.99999999740976},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1006.0000000012224,&quot;domainLookupStart&quot;:1006.0000000012224,&quot;domainLookupEnd&quot;:1006.0000000012224,&quot;connectStart&quot;:1006.0000000012224,&quot;connectEnd&quot;:1006.0000000012224,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1006.0000000012224,&quot;responseStart&quot;:1006.0000000012224,&quot;responseEnd&quot;:1006.0000000012224,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:88454,&quot;decodedBodySize&quot;:253009,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-69305c61e4ce67cdef4a70845fc0e959.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1006.0000000012224,&quot;duration&quot;:0},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1006.0000000012224,&quot;domainLookupStart&quot;:1006.0000000012224,&quot;domainLookupEnd&quot;:1006.0000000012224,&quot;connectStart&quot;:1006.0000000012224,&quot;connectEnd&quot;:1006.0000000012224,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1019.4999999985157,&quot;responseStart&quot;:1021.4999999989232,&quot;responseEnd&quot;:1025.999999998021,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:1574,&quot;decodedBodySize&quot;:1574,&quot;name&quot;:&quot;https://avatars1.githubusercontent.com/u/${actorID}?s=40&amp;v=4&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1006.0000000012224,&quot;duration&quot;:19.99999999679858},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1006.0000000012224,&quot;domainLookupStart&quot;:1006.0000000012224,&quot;domainLookupEnd&quot;:1006.0000000012224,&quot;connectStart&quot;:1006.0000000012224,&quot;connectEnd&quot;:1006.0000000012224,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1025.499999999738,&quot;responseStart&quot;:1025.499999999738,&quot;responseEnd&quot;:1038.0000000004657,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:136536,&quot;decodedBodySize&quot;:477195,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-b5ffe6e7dc9195ef4d6fc74858e4372f.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1006.0000000012224,&quot;duration&quot;:31.9999999992433},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1817.9999999993015,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:1991.9999999983702,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1817.9999999993015,&quot;duration&quot;:173.99999999906868},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1817.9999999993015,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2056.0000000004948,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1817.9999999993015,&quot;duration&quot;:238.00000000119326},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1827.000000001135,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:1993.9999999987776,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1827.000000001135,&quot;duration&quot;:166.9999999976426},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1827.000000001135,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2056.0000000004948,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1827.000000001135,&quot;duration&quot;:228.99999999935972},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1837.999999999738,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2011.9999999988067,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1837.999999999738,&quot;duration&quot;:173.99999999906868},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1856.999999999971,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2091.0000000003492,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[title]=GitHub&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Flogin&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x211&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526367857791&amp;dimensions[request_id]=0681%3A7774%3A1CB2D3%3A2A3C27%3A5AFA8670&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-984-984--1371-1369-1369-996-984-984-984---0-984-4-405-986-984--985-985&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1856.999999999971,&quot;duration&quot;:234.00000000037835}],&quot;timestamp&quot;:1526367858052},{&quot;navigationTimings&quot;:[{&quot;unloadEventStart&quot;:985.0000000005821,&quot;unloadEventEnd&quot;:985.0000000005821,&quot;domInteractive&quot;:1368.9999999987776,&quot;domContentLoadedEventStart&quot;:1368.9999999987776,&quot;domContentLoadedEventEnd&quot;:1370.999999999185,&quot;domComplete&quot;:2091.0000000003492,&quot;loadEventStart&quot;:2091.0000000003492,&quot;loadEventEnd&quot;:2098.999999998341,&quot;type&quot;:&quot;navigate&quot;,&quot;redirectCount&quot;:1,&quot;initiatorType&quot;:&quot;navigation&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:4.000000000814907,&quot;redirectEnd&quot;:984.0000000003783,&quot;fetchStart&quot;:984.0000000003783,&quot;domainLookupStart&quot;:984.0000000003783,&quot;domainLookupEnd&quot;:984.0000000003783,&quot;connectStart&quot;:984.0000000003783,&quot;connectEnd&quot;:984.0000000003783,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:404.99999999883585,&quot;responseStart&quot;:984.0000000003783,&quot;responseEnd&quot;:986.0000000007858,&quot;transferSize&quot;:16132,&quot;encodedBodySize&quot;:10936,&quot;decodedBodySize&quot;:42229,&quot;name&quot;:&quot;https://github.com/session&quot;,&quot;entryType&quot;:&quot;navigation&quot;,&quot;startTime&quot;:0,&quot;duration&quot;:2098.999999998341}],&quot;timestamp&quot;:1526367858054}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection" enabled="true">
              <boolProp name="TLS">true</boolProp>
              <stringProp name="server">live.github.com</stringProp>
              <stringProp name="port">443</stringProp>
              <stringProp name="path">${WSPath}</stringProp>
            </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48626">101</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Single Write Sampler" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server"></stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path"></stringProp>
              <boolProp name="binaryPayload">false</boolProp>
              <stringProp name="requestData">subscribe:notification-changed:${actorID}</stringProp>
              <boolProp name="createNewConnection">false</boolProp>
            </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Repository not Exist" enabled="true">
          <stringProp name="IfController.condition">${createThenDelete}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Repository" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click New Repository button" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Redirect to New Respository page" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">new</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">createRepositoryToken</stringProp>
                  <stringProp name="HtmlExtractor.expr">#new_repository&gt;input[name=&apos;authenticity_token&apos;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">value</stringProp>
                  <stringProp name="HtmlExtractor.default"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">completeWSLink</stringProp>
                  <stringProp name="HtmlExtractor.expr">link[rel=&apos;web-socket&apos;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">href</stringProp>
                  <stringProp name="HtmlExtractor.default"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">String completeWSLink = vars.get(&quot;completeWSLink&quot;);
String WSPath = completeWSLink.split(&quot;live.github.com/&quot;)[1];

vars.put(&quot;WSPath&quot;, WSPath);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">repositoryNameCheckToken</stringProp>
                  <stringProp name="HtmlExtractor.expr">auto-check</stringProp>
                  <stringProp name="HtmlExtractor.attribute">csrf</stringProp>
                  <stringProp name="HtmlExtractor.default"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Page Text" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1649618413">Create a new repository</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="signature" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="signature" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/settings/billing/payment/signature</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
                <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49590">204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;hydroEventPayload&quot;:&quot;{\&quot;event_type\&quot;:\&quot;dashboard.click\&quot;,\&quot;payload\&quot;:{\&quot;event_context\&quot;:\&quot;REPOSITORIES\&quot;,\&quot;target\&quot;:\&quot;NEW_REPOSITORY_BUTTON\&quot;,\&quot;dashboard_context\&quot;:\&quot;user\&quot;,\&quot;dashboard_version\&quot;:0,\&quot;user_id\&quot;:${actorID},\&quot;client_id\&quot;:\&quot;1790278635.1476950947\&quot;,\&quot;originating_request_id\&quot;:\&quot;0782:77CA:5C2965:85BFB0:5AF54CC7\&quot;}}&quot;,&quot;hydroEventHmac&quot;:&quot;de6ddc0d50f34740c7c89480eafcd8e192aaf76fed8779a8dcbdbb9fa165538d&quot;,&quot;timestamp&quot;:1526029455407}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="signature" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="signature" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/settings/billing/payment/signature</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="page_view" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[title]=Create%20a%20New%20Repository&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x532&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526029457363&amp;dimensions[request_id]=0780%3A77CA%3A61138B%3A8CDFE1%3A5AF55C8F&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-105-88--1215-1212-1204-574-88-14-13---0---105-566-563-90-563-563&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection" enabled="true">
                <boolProp name="TLS">true</boolProp>
                <stringProp name="server">live.github.com</stringProp>
                <stringProp name="port">443</stringProp>
                <stringProp name="path">${WSPath}</stringProp>
              </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Single Write Sampler" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <boolProp name="binaryPayload">false</boolProp>
                <stringProp name="requestData">subscribe:notification-changed:${actorID}</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Input Repository Name" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html; fragment</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Repository Name" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="authenticity_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${repositoryNameCheckToken}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">authenticity_token</stringProp>
                    </elementProp>
                    <elementProp name="value" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${repositoryName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">value</stringProp>
                    </elementProp>
                    <elementProp name="owner" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${actorLogin}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">owner</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
                <stringProp name="HTTPSampler.path">/repositories/check-name</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Create Repository button" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Repository" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="authenticity_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${createRepositoryToken}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">authenticity_token</stringProp>
                    </elementProp>
                    <elementProp name="owner" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${actorLogin}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">owner</stringProp>
                    </elementProp>
                    <elementProp name="repository[name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${repositoryName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">repository[name]</stringProp>
                    </elementProp>
                    <elementProp name="repository[description]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${formatedDate}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">repository[description]</stringProp>
                    </elementProp>
                    <elementProp name="repository[public]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">repository[public]</stringProp>
                    </elementProp>
                    <elementProp name="repository[auto_init]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">repository[auto_init]</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
                <stringProp name="HTTPSampler.path">repositories</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="393033322">Quick setup</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;

String formatedDate = null;

SimpleDateFormat sdt = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;);
try
{
    formatedDate = sdt.format(new Date());
} catch (Exception e)
{
    log.error(&quot;Something wrong with the date conversion!&quot;);
}
log.info(&quot;The formated date value is: &quot; + formatedDate);

vars.put(&quot;formatedDate&quot;, formatedDate);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Redirect to created Respository page" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${actorLogin}/${repositoryName}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">signOutToken</stringProp>
                  <stringProp name="HtmlExtractor.expr">form[class=&apos;logout-form&apos;]&gt;input[name=&apos;authenticity_token&apos;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">value</stringProp>
                  <stringProp name="HtmlExtractor.default"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">completeWSLink</stringProp>
                  <stringProp name="HtmlExtractor.expr">link[rel=&apos;web-socket&apos;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">href</stringProp>
                  <stringProp name="HtmlExtractor.default"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">String completeWSLink = vars.get(&quot;completeWSLink&quot;);
String WSPath = completeWSLink.split(&quot;live.github.com/&quot;)[1];

vars.put(&quot;WSPath&quot;, WSPath);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="collect" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=196222607&amp;t=event&amp;ni=1&amp;_s=1&amp;dl=https%3A%2F%2Fgithub.com%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Ffiles%2Fdisambiguate&amp;ul=en-us&amp;de=UTF-8&amp;dt=(masked)&amp;sd=24-bit&amp;sr=1360x857&amp;vp=1343x319&amp;je=0&amp;ec=Repository&amp;ea=create&amp;el=target%3AUser%3B%20billing%3Afalse%3B%20repo%3Apublic&amp;_u=SCCAAEABM~&amp;jid=&amp;cid=194624480.1476950947&amp;tid=UA-3769691-2&amp;cd1=Logged%20In&amp;z=412298220</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">collect</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="page_view" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2Fsss&amp;dimensions[title]=${actorLogin}%2Fsss&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x319&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526030585073&amp;dimensions[request_id]=0780%3A79F6%3A610673%3A8D8942%3A5AF560F7&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;dimensions[user_id]=${actorID}&amp;dimensions[user_login]=${actorLogin}&amp;dimensions[repository_id]=133018874&amp;dimensions[repository_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_public]=true&amp;dimensions[repository_is_fork]=false&amp;dimensions[repository_network_root_id]=133018874&amp;dimensions[repository_network_root_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_explore_github_marketplace_ci_cta_shown]=true&amp;&amp;measures[performance_timing]=1-1535-1535--2103-2095-2095-1556-1535-1535-1535---0-1535-7-1030-1760-1537--1536-1536&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection" enabled="true">
                <boolProp name="TLS">true</boolProp>
                <stringProp name="server">live.github.com</stringProp>
                <stringProp name="port">443</stringProp>
                <stringProp name="path">${WSPath}</stringProp>
              </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Single Write Sampler" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <boolProp name="binaryPayload">false</boolProp>
                <stringProp name="requestData">subscribe:notification-changed:26293247</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">40</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;features&quot;:{&quot;beacon&quot;:true,&quot;classlist&quot;:true,&quot;classlistMultiArg&quot;:true,&quot;closest&quot;:true,&quot;customElements&quot;:true,&quot;customEvent&quot;:true,&quot;fetch&quot;:true,&quot;highResolutionTime&quot;:true,&quot;matchesSelector&quot;:true,&quot;promises&quot;:true,&quot;stringEndsWith&quot;:true,&quot;stringStartsWith&quot;:true,&quot;timezone&quot;:true,&quot;url&quot;:true,&quot;urlSearchParams&quot;:true,&quot;userTimingEntries&quot;:true,&quot;userTimingMark&quot;:true,&quot;weakmap&quot;:true},&quot;timestamp&quot;:1526030584928},{&quot;resourceTimings&quot;:[{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1634.0000000054715,&quot;domainLookupStart&quot;:1634.0000000054715,&quot;domainLookupEnd&quot;:1634.0000000054715,&quot;connectStart&quot;:1634.0000000054715,&quot;connectEnd&quot;:1634.0000000054715,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1636.5000000077998,&quot;responseStart&quot;:1636.5000000077998,&quot;responseEnd&quot;:1648.0000000010477,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:23122,&quot;decodedBodySize&quot;:113522,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-35bdc21c9cfe5499e25ab7ce9d31a2cc.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1634.0000000054715,&quot;duration&quot;:13.999999995576218},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1634.0000000054715,&quot;domainLookupStart&quot;:1649.4999999995343,&quot;domainLookupEnd&quot;:1653.5000000003492,&quot;connectStart&quot;:1653.5000000003492,&quot;connectEnd&quot;:1657.5000000011642,&quot;secureConnectionStart&quot;:1654.500000004191,&quot;requestStart&quot;:1665.500000002794,&quot;responseStart&quot;:1666.5000000066357,&quot;responseEnd&quot;:1671.0000000020955,&quot;transferSize&quot;:479,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://avatars1.githubusercontent.com/u/${actorID}?s=40&amp;v=4&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1634.0000000054715,&quot;duration&quot;:36.999999996623956},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1634.0000000054715,&quot;domainLookupStart&quot;:1634.0000000054715,&quot;domainLookupEnd&quot;:1634.0000000054715,&quot;connectStart&quot;:1634.0000000054715,&quot;connectEnd&quot;:1634.0000000054715,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1638.5000000009313,&quot;responseStart&quot;:1638.5000000009313,&quot;responseEnd&quot;:1649.0000000048894,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:94138,&quot;decodedBodySize&quot;:402005,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-53c9bcdc66bd65746c42e29457a4e2ab.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1634.0000000054715,&quot;duration&quot;:14.999999999417923},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1892.0000000071013,&quot;domainLookupStart&quot;:1892.0000000071013,&quot;domainLookupEnd&quot;:1892.0000000071013,&quot;connectStart&quot;:1892.0000000071013,&quot;connectEnd&quot;:1892.0000000071013,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1892.0000000071013,&quot;responseStart&quot;:1892.0000000071013,&quot;responseEnd&quot;:1892.0000000071013,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:88465,&quot;decodedBodySize&quot;:253180,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-644046793a9a820484b09b18e7389918.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1892.0000000071013,&quot;duration&quot;:0},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1898.0000000010477,&quot;domainLookupStart&quot;:1898.0000000010477,&quot;domainLookupEnd&quot;:1898.0000000010477,&quot;connectStart&quot;:1898.0000000010477,&quot;connectEnd&quot;:1898.0000000010477,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1899.4999999995343,&quot;responseStart&quot;:1899.4999999995343,&quot;responseEnd&quot;:1906.0000000026776,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:136371,&quot;decodedBodySize&quot;:476606,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-85fc10e5f867231156677d344e74faa4.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1898.0000000010477,&quot;duration&quot;:8.000000001629815},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2523.0000000010477,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2869.9999999953434,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2523.0000000010477,&quot;duration&quot;:346.99999999429565},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2543.0000000051223,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2869.9999999953434,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2543.0000000051223,&quot;duration&quot;:326.9999999902211},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2552.9999999998836,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:3448.000000003958,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2Fsss&amp;dimensions[title]=${actorLogin}%2Fsss&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x319&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526030585073&amp;dimensions[request_id]=0780%3A79F6%3A610673%3A8D8942%3A5AF560F7&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;dimensions[user_id]=${actorID}&amp;dimensions[user_login]=${actorLogin}&amp;dimensions[repository_id]=133018874&amp;dimensions[repository_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_public]=true&amp;dimensions[repository_is_fork]=false&amp;dimensions[repository_network_root_id]=133018874&amp;dimensions[repository_network_root_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_explore_github_marketplace_ci_cta_shown]=true&amp;&amp;measures[performance_timing]=1-1535-1535--2103-2095-2095-1556-1535-1535-1535---0-1535-7-1030-1760-1537--1536-1536&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2552.9999999998836,&quot;duration&quot;:895.0000000040745}],&quot;timestamp&quot;:1526030585988},{&quot;navigationTimings&quot;:[{&quot;unloadEventStart&quot;:1536.0000000073342,&quot;unloadEventEnd&quot;:1536.0000000073342,&quot;domInteractive&quot;:2095.000000001164,&quot;domContentLoadedEventStart&quot;:2095.000000001164,&quot;domContentLoadedEventEnd&quot;:2103.000000002794,&quot;domComplete&quot;:3448.000000003958,&quot;loadEventStart&quot;:3448.000000003958,&quot;loadEventEnd&quot;:3449.9999999970896,&quot;type&quot;:&quot;navigate&quot;,&quot;redirectCount&quot;:1,&quot;initiatorType&quot;:&quot;navigation&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:6.999999997788109,&quot;redirectEnd&quot;:1535.0000000034925,&quot;fetchStart&quot;:1535.0000000034925,&quot;domainLookupStart&quot;:1535.0000000034925,&quot;domainLookupEnd&quot;:1535.0000000034925,&quot;connectStart&quot;:1535.0000000034925,&quot;connectEnd&quot;:1535.0000000034925,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1029.9999999988358,&quot;responseStart&quot;:1536.999999996624,&quot;responseEnd&quot;:1759.9999999947613,&quot;transferSize&quot;:18913,&quot;encodedBodySize&quot;:13576,&quot;decodedBodySize&quot;:46728,&quot;name&quot;:&quot;https://github.com/repositories&quot;,&quot;entryType&quot;:&quot;navigation&quot;,&quot;startTime&quot;:0,&quot;duration&quot;:3449.9999999970896}],&quot;timestamp&quot;:1526030585989}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DeleteRepository" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click the Repository name" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Redirect to created Respository page" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${actorLogin}/${repositoryName}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">signOutToken</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//form[@class=&apos;logout-form&apos;]/input[@name=&apos;authenticity_token&apos;]/@value</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">completeWSLink</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//link[@rel=&apos;web-socket&apos;]/@href</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">String completeWSLink = vars.get(&quot;completeWSLink&quot;);
String WSPath = completeWSLink.split(&quot;live.github.com/&quot;)[1];

vars.put(&quot;WSPath&quot;, WSPath);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="collect" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=196222607&amp;t=event&amp;ni=1&amp;_s=1&amp;dl=https%3A%2F%2Fgithub.com%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Ffiles%2Fdisambiguate&amp;ul=en-us&amp;de=UTF-8&amp;dt=(masked)&amp;sd=24-bit&amp;sr=1360x857&amp;vp=1343x319&amp;je=0&amp;ec=Repository&amp;ea=create&amp;el=target%3AUser%3B%20billing%3Afalse%3B%20repo%3Apublic&amp;_u=SCCAAEABM~&amp;jid=&amp;cid=194624480.1476950947&amp;tid=UA-3769691-2&amp;cd1=Logged%20In&amp;z=412298220</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">collect</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="page_view" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2Fsss&amp;dimensions[title]=${actorLogin}%2Fsss&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x319&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526030585073&amp;dimensions[request_id]=0780%3A79F6%3A610673%3A8D8942%3A5AF560F7&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;dimensions[user_id]=${actorID}&amp;dimensions[user_login]=${actorLogin}&amp;dimensions[repository_id]=133018874&amp;dimensions[repository_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_public]=true&amp;dimensions[repository_is_fork]=false&amp;dimensions[repository_network_root_id]=133018874&amp;dimensions[repository_network_root_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_explore_github_marketplace_ci_cta_shown]=true&amp;&amp;measures[performance_timing]=1-1535-1535--2103-2095-2095-1556-1535-1535-1535---0-1535-7-1030-1760-1537--1536-1536&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection" enabled="true">
                <boolProp name="TLS">true</boolProp>
                <stringProp name="server">live.github.com</stringProp>
                <stringProp name="port">443</stringProp>
                <stringProp name="path">${WSPath}</stringProp>
              </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Single Write Sampler" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <boolProp name="binaryPayload">false</boolProp>
                <stringProp name="requestData">subscribe:notification-changed:26293247</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">40</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;features&quot;:{&quot;beacon&quot;:true,&quot;classlist&quot;:true,&quot;classlistMultiArg&quot;:true,&quot;closest&quot;:true,&quot;customElements&quot;:true,&quot;customEvent&quot;:true,&quot;fetch&quot;:true,&quot;highResolutionTime&quot;:true,&quot;matchesSelector&quot;:true,&quot;promises&quot;:true,&quot;stringEndsWith&quot;:true,&quot;stringStartsWith&quot;:true,&quot;timezone&quot;:true,&quot;url&quot;:true,&quot;urlSearchParams&quot;:true,&quot;userTimingEntries&quot;:true,&quot;userTimingMark&quot;:true,&quot;weakmap&quot;:true},&quot;timestamp&quot;:1526030584928},{&quot;resourceTimings&quot;:[{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1634.0000000054715,&quot;domainLookupStart&quot;:1634.0000000054715,&quot;domainLookupEnd&quot;:1634.0000000054715,&quot;connectStart&quot;:1634.0000000054715,&quot;connectEnd&quot;:1634.0000000054715,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1636.5000000077998,&quot;responseStart&quot;:1636.5000000077998,&quot;responseEnd&quot;:1648.0000000010477,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:23122,&quot;decodedBodySize&quot;:113522,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-35bdc21c9cfe5499e25ab7ce9d31a2cc.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1634.0000000054715,&quot;duration&quot;:13.999999995576218},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1634.0000000054715,&quot;domainLookupStart&quot;:1649.4999999995343,&quot;domainLookupEnd&quot;:1653.5000000003492,&quot;connectStart&quot;:1653.5000000003492,&quot;connectEnd&quot;:1657.5000000011642,&quot;secureConnectionStart&quot;:1654.500000004191,&quot;requestStart&quot;:1665.500000002794,&quot;responseStart&quot;:1666.5000000066357,&quot;responseEnd&quot;:1671.0000000020955,&quot;transferSize&quot;:479,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://avatars1.githubusercontent.com/u/${actorID}?s=40&amp;v=4&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1634.0000000054715,&quot;duration&quot;:36.999999996623956},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1634.0000000054715,&quot;domainLookupStart&quot;:1634.0000000054715,&quot;domainLookupEnd&quot;:1634.0000000054715,&quot;connectStart&quot;:1634.0000000054715,&quot;connectEnd&quot;:1634.0000000054715,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1638.5000000009313,&quot;responseStart&quot;:1638.5000000009313,&quot;responseEnd&quot;:1649.0000000048894,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:94138,&quot;decodedBodySize&quot;:402005,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-53c9bcdc66bd65746c42e29457a4e2ab.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1634.0000000054715,&quot;duration&quot;:14.999999999417923},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1892.0000000071013,&quot;domainLookupStart&quot;:1892.0000000071013,&quot;domainLookupEnd&quot;:1892.0000000071013,&quot;connectStart&quot;:1892.0000000071013,&quot;connectEnd&quot;:1892.0000000071013,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1892.0000000071013,&quot;responseStart&quot;:1892.0000000071013,&quot;responseEnd&quot;:1892.0000000071013,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:88465,&quot;decodedBodySize&quot;:253180,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-644046793a9a820484b09b18e7389918.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1892.0000000071013,&quot;duration&quot;:0},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1898.0000000010477,&quot;domainLookupStart&quot;:1898.0000000010477,&quot;domainLookupEnd&quot;:1898.0000000010477,&quot;connectStart&quot;:1898.0000000010477,&quot;connectEnd&quot;:1898.0000000010477,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1899.4999999995343,&quot;responseStart&quot;:1899.4999999995343,&quot;responseEnd&quot;:1906.0000000026776,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:136371,&quot;decodedBodySize&quot;:476606,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-85fc10e5f867231156677d344e74faa4.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1898.0000000010477,&quot;duration&quot;:8.000000001629815},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2523.0000000010477,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2869.9999999953434,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2523.0000000010477,&quot;duration&quot;:346.99999999429565},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2543.0000000051223,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2869.9999999953434,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2543.0000000051223,&quot;duration&quot;:326.9999999902211},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2552.9999999998836,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:3448.000000003958,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2Fsss&amp;dimensions[title]=${actorLogin}%2Fsss&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x319&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526030585073&amp;dimensions[request_id]=0780%3A79F6%3A610673%3A8D8942%3A5AF560F7&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;dimensions[user_id]=${actorID}&amp;dimensions[user_login]=${actorLogin}&amp;dimensions[repository_id]=133018874&amp;dimensions[repository_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_public]=true&amp;dimensions[repository_is_fork]=false&amp;dimensions[repository_network_root_id]=133018874&amp;dimensions[repository_network_root_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_explore_github_marketplace_ci_cta_shown]=true&amp;&amp;measures[performance_timing]=1-1535-1535--2103-2095-2095-1556-1535-1535-1535---0-1535-7-1030-1760-1537--1536-1536&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2552.9999999998836,&quot;duration&quot;:895.0000000040745}],&quot;timestamp&quot;:1526030585988},{&quot;navigationTimings&quot;:[{&quot;unloadEventStart&quot;:1536.0000000073342,&quot;unloadEventEnd&quot;:1536.0000000073342,&quot;domInteractive&quot;:2095.000000001164,&quot;domContentLoadedEventStart&quot;:2095.000000001164,&quot;domContentLoadedEventEnd&quot;:2103.000000002794,&quot;domComplete&quot;:3448.000000003958,&quot;loadEventStart&quot;:3448.000000003958,&quot;loadEventEnd&quot;:3449.9999999970896,&quot;type&quot;:&quot;navigate&quot;,&quot;redirectCount&quot;:1,&quot;initiatorType&quot;:&quot;navigation&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:6.999999997788109,&quot;redirectEnd&quot;:1535.0000000034925,&quot;fetchStart&quot;:1535.0000000034925,&quot;domainLookupStart&quot;:1535.0000000034925,&quot;domainLookupEnd&quot;:1535.0000000034925,&quot;connectStart&quot;:1535.0000000034925,&quot;connectEnd&quot;:1535.0000000034925,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1029.9999999988358,&quot;responseStart&quot;:1536.999999996624,&quot;responseEnd&quot;:1759.9999999947613,&quot;transferSize&quot;:18913,&quot;encodedBodySize&quot;:13576,&quot;decodedBodySize&quot;:46728,&quot;name&quot;:&quot;https://github.com/repositories&quot;,&quot;entryType&quot;:&quot;navigation&quot;,&quot;startTime&quot;:0,&quot;duration&quot;:3449.9999999970896}],&quot;timestamp&quot;:1526030585989}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click the Repository Setting" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Redirect to Respository Setting page" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${actorLogin}/${repositoryName}/settings?_pjax=%23js-repo-pjax-container</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">token</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//form[contains(@action,&apos;delete&apos;)]/input[@name=&apos;authenticity_token&apos;]/@value</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Page Text" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1499275331">Settings</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="page_view" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2Fddd%2Fsettings&amp;dimensions[title]=Options&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x183&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526032533179&amp;dimensions[request_id]=0780%3A422F%3A19BB93%3A255F23%3A5AF56762&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;dimensions[user_id]=${actorID}&amp;dimensions[user_login]=${actorLogin}&amp;dimensions[repository_id]=133021996&amp;dimensions[repository_nwo]=${actorLogin}%2Fddd&amp;dimensions[repository_public]=true&amp;dimensions[repository_is_fork]=false&amp;dimensions[repository_network_root_id]=133021996&amp;dimensions[repository_network_root_nwo]=${actorLogin}%2Fddd&amp;dimensions[repository_explore_github_marketplace_ci_cta_shown]=true&amp;&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;requestUrl&quot;:&quot;https://github.com/${actorLogin}/${repositoryName}/settings?_pjax=%23js-repo-pjax-container&quot;,&quot;pjaxDuration&quot;:589,&quot;timestamp&quot;:1526275538826}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delete Repository and input Repository Name" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Respository" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="_method" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">delete</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_method</stringProp>
                    </elementProp>
                    <elementProp name="authenticity_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">authenticity_token</stringProp>
                    </elementProp>
                    <elementProp name="verify" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${repositoryName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">verify</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
                <stringProp name="HTTPSampler.path">${actorLogin}/${repositoryName}/settings/delete</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-298799456">successfully deleted</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Redirect to initial page" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">signOutToken</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//form[@class=&apos;logout-form&apos;]/input[@name=&apos;authenticity_token&apos;]/@value</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">completeWSLink</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//link[@rel=&apos;web-socket&apos;]/@href</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">String completeWSLink = vars.get(&quot;completeWSLink&quot;);
String WSPath = completeWSLink.split(&quot;live.github.com/&quot;)[1];

vars.put(&quot;WSPath&quot;, WSPath);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="collect" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=786006260&amp;t=event&amp;ni=1&amp;_s=1&amp;dl=https%3A%2F%2Fgithub.com%2Fdashboard&amp;ul=en-us&amp;de=UTF-8&amp;dt=(masked)&amp;sd=24-bit&amp;sr=1360x857&amp;vp=1343x270&amp;je=0&amp;ec=Hello%20World&amp;ea=linkview&amp;el=Viewed%20Hello%20World&amp;_u=SCCAAEABM~&amp;jid=&amp;cid=194624480.1476950947&amp;tid=UA-3769691-2&amp;cd1=Logged%20In&amp;z=1672074900</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">collect</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="collect" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=786006260&amp;t=event&amp;ni=1&amp;_s=2&amp;dl=https%3A%2F%2Fgithub.com%2Fdashboard&amp;ul=en-us&amp;de=UTF-8&amp;dt=(masked)&amp;sd=24-bit&amp;sr=1360x857&amp;vp=1343x270&amp;je=0&amp;ec=Dashboard&amp;ea=load%20broadcast&amp;el=Custom%20domains%20on%20GitHub%20Pages%20gain%20support%20for%20HTTPS&amp;_u=SCCAAEABM~&amp;jid=&amp;cid=194624480.1476950947&amp;tid=UA-3769691-2&amp;cd1=Logged%20In&amp;z=352556349</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">collect</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="page_view" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[title]=GitHub&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2Fddd%2Fsettings&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x270&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526032759214&amp;dimensions[request_id]=0780%3A709D%3A62FE6%3A929E0%3A5AF56975&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-903-903--1346-1338-1338-923-903-903-903---0-903-6-420-907-904--904-904&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection" enabled="true">
                <boolProp name="TLS">true</boolProp>
                <stringProp name="server">live.github.com</stringProp>
                <stringProp name="port">443</stringProp>
                <stringProp name="path">${WSPath}</stringProp>
              </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Single Write Sampler" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <boolProp name="binaryPayload">false</boolProp>
                <stringProp name="requestData">subscribe:notification-changed:26293247</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">40</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;features&quot;:{&quot;beacon&quot;:true,&quot;classlist&quot;:true,&quot;classlistMultiArg&quot;:true,&quot;closest&quot;:true,&quot;customElements&quot;:true,&quot;customEvent&quot;:true,&quot;fetch&quot;:true,&quot;highResolutionTime&quot;:true,&quot;matchesSelector&quot;:true,&quot;promises&quot;:true,&quot;stringEndsWith&quot;:true,&quot;stringStartsWith&quot;:true,&quot;timezone&quot;:true,&quot;url&quot;:true,&quot;urlSearchParams&quot;:true,&quot;userTimingEntries&quot;:true,&quot;userTimingMark&quot;:true,&quot;weakmap&quot;:true},&quot;timestamp&quot;:1526032759059},{&quot;resourceTimings&quot;:[{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:997.0000000030268,&quot;domainLookupStart&quot;:997.0000000030268,&quot;domainLookupEnd&quot;:997.0000000030268,&quot;connectStart&quot;:997.0000000030268,&quot;connectEnd&quot;:997.0000000030268,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1001.9999999931315,&quot;responseStart&quot;:1002.9999999969732,&quot;responseEnd&quot;:1008.0000000016298,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:23122,&quot;decodedBodySize&quot;:113522,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-35bdc21c9cfe5499e25ab7ce9d31a2cc.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:997.0000000030268,&quot;duration&quot;:10.999999998603016},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:997.0000000030268,&quot;domainLookupStart&quot;:997.0000000030268,&quot;domainLookupEnd&quot;:997.0000000030268,&quot;connectStart&quot;:997.0000000030268,&quot;connectEnd&quot;:997.0000000030268,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1005.4999999993015,&quot;responseStart&quot;:1006.5000000031432,&quot;responseEnd&quot;:1014.9999999994179,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:94138,&quot;decodedBodySize&quot;:402005,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-53c9bcdc66bd65746c42e29457a4e2ab.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:997.0000000030268,&quot;duration&quot;:17.999999996391125},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:998.0000000068685,&quot;domainLookupStart&quot;:998.0000000068685,&quot;domainLookupEnd&quot;:998.0000000068685,&quot;connectStart&quot;:998.0000000068685,&quot;connectEnd&quot;:998.0000000068685,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:998.0000000068685,&quot;responseStart&quot;:998.0000000068685,&quot;responseEnd&quot;:998.0000000068685,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:88465,&quot;decodedBodySize&quot;:253180,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-644046793a9a820484b09b18e7389918.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:998.0000000068685,&quot;duration&quot;:0},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:998.0000000068685,&quot;domainLookupStart&quot;:1008.4999999962747,&quot;domainLookupEnd&quot;:1018.5000000055879,&quot;connectStart&quot;:1018.5000000055879,&quot;connectEnd&quot;:1027.4999999965075,&quot;secureConnectionStart&quot;:1020.4999999987194,&quot;requestStart&quot;:1027.4999999965075,&quot;responseStart&quot;:1036.500000001979,&quot;responseEnd&quot;:1044.9999999982538,&quot;transferSize&quot;:479,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://avatars1.githubusercontent.com/u/${actorID}?s=40&amp;v=4&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:998.0000000068685,&quot;duration&quot;:46.999999991385266},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:998.0000000068685,&quot;domainLookupStart&quot;:998.0000000068685,&quot;domainLookupEnd&quot;:998.0000000068685,&quot;connectStart&quot;:998.0000000068685,&quot;connectEnd&quot;:998.0000000068685,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1012.4999999970896,&quot;responseStart&quot;:1012.4999999970896,&quot;responseEnd&quot;:1033.9999999996508,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:136371,&quot;decodedBodySize&quot;:476606,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-85fc10e5f867231156677d344e74faa4.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:998.0000000068685,&quot;duration&quot;:35.99999999278225},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1918.0000000051223,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2312.000000005355,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1918.0000000051223,&quot;duration&quot;:394.00000000023283},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1927.9999999998836,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2312.999999994645,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1927.9999999998836,&quot;duration&quot;:384.9999999947613},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1948.999999993248,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2312.000000005355,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1948.999999993248,&quot;duration&quot;:363.0000000121072},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1960.9999999956926,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2604.9999999959255,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[title]=GitHub&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2F${repositoryName}%2Fsettings&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x270&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526032759214&amp;dimensions[request_id]=0780%3A709D%3A62FE6%3A929E0%3A5AF56975&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-903-903--1346-1338-1338-923-903-903-903---0-903-6-420-907-904--904-904&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1960.9999999956926,&quot;duration&quot;:644.0000000002328}],&quot;timestamp&quot;:1526032759872},{&quot;navigationTimings&quot;:[{&quot;unloadEventStart&quot;:903.9999999949941,&quot;unloadEventEnd&quot;:903.9999999949941,&quot;domInteractive&quot;:1338.000000003376,&quot;domContentLoadedEventStart&quot;:1338.000000003376,&quot;domContentLoadedEventEnd&quot;:1346.0000000050059,&quot;domComplete&quot;:2605.999999999767,&quot;loadEventStart&quot;:2605.999999999767,&quot;loadEventEnd&quot;:2607.000000003609,&quot;type&quot;:&quot;navigate&quot;,&quot;redirectCount&quot;:1,&quot;initiatorType&quot;:&quot;navigation&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:5.999999993946403,&quot;redirectEnd&quot;:903.0000000057044,&quot;fetchStart&quot;:903.0000000057044,&quot;domainLookupStart&quot;:903.0000000057044,&quot;domainLookupEnd&quot;:903.0000000057044,&quot;connectStart&quot;:903.0000000057044,&quot;connectEnd&quot;:903.0000000057044,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:419.99999999825377,&quot;responseStart&quot;:903.9999999949941,&quot;responseEnd&quot;:907.0000000065193,&quot;transferSize&quot;:16200,&quot;encodedBodySize&quot;:11043,&quot;decodedBodySize&quot;:42670,&quot;name&quot;:&quot;https://github.com/${actorLogin}/${repositoryName}/settings/delete&quot;,&quot;entryType&quot;:&quot;navigation&quot;,&quot;startTime&quot;:0,&quot;duration&quot;:2607.000000003609}],&quot;timestamp&quot;:1526032759872}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Repository Exist" enabled="true">
          <stringProp name="IfController.condition">${deleteThenCreate}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DeleteRepository" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click the Repository name" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Redirect to created Respository page" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${actorLogin}/${repositoryName}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">signOutToken</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//form[@class=&apos;logout-form&apos;]/input[@name=&apos;authenticity_token&apos;]/@value</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">completeWSLink</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//link[@rel=&apos;web-socket&apos;]/@href</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">String completeWSLink = vars.get(&quot;completeWSLink&quot;);
String WSPath = completeWSLink.split(&quot;live.github.com/&quot;)[1];

vars.put(&quot;WSPath&quot;, WSPath);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="collect" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=196222607&amp;t=event&amp;ni=1&amp;_s=1&amp;dl=https%3A%2F%2Fgithub.com%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Ffiles%2Fdisambiguate&amp;ul=en-us&amp;de=UTF-8&amp;dt=(masked)&amp;sd=24-bit&amp;sr=1360x857&amp;vp=1343x319&amp;je=0&amp;ec=Repository&amp;ea=create&amp;el=target%3AUser%3B%20billing%3Afalse%3B%20repo%3Apublic&amp;_u=SCCAAEABM~&amp;jid=&amp;cid=194624480.1476950947&amp;tid=UA-3769691-2&amp;cd1=Logged%20In&amp;z=412298220</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">collect</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="page_view" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2Fsss&amp;dimensions[title]=${actorLogin}%2Fsss&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x319&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526030585073&amp;dimensions[request_id]=0780%3A79F6%3A610673%3A8D8942%3A5AF560F7&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;dimensions[user_id]=${actorID}&amp;dimensions[user_login]=${actorLogin}&amp;dimensions[repository_id]=133018874&amp;dimensions[repository_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_public]=true&amp;dimensions[repository_is_fork]=false&amp;dimensions[repository_network_root_id]=133018874&amp;dimensions[repository_network_root_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_explore_github_marketplace_ci_cta_shown]=true&amp;&amp;measures[performance_timing]=1-1535-1535--2103-2095-2095-1556-1535-1535-1535---0-1535-7-1030-1760-1537--1536-1536&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection" enabled="true">
                <boolProp name="TLS">true</boolProp>
                <stringProp name="server">live.github.com</stringProp>
                <stringProp name="port">443</stringProp>
                <stringProp name="path">${WSPath}</stringProp>
              </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Single Write Sampler" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <boolProp name="binaryPayload">false</boolProp>
                <stringProp name="requestData">subscribe:notification-changed:26293247</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">40</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;features&quot;:{&quot;beacon&quot;:true,&quot;classlist&quot;:true,&quot;classlistMultiArg&quot;:true,&quot;closest&quot;:true,&quot;customElements&quot;:true,&quot;customEvent&quot;:true,&quot;fetch&quot;:true,&quot;highResolutionTime&quot;:true,&quot;matchesSelector&quot;:true,&quot;promises&quot;:true,&quot;stringEndsWith&quot;:true,&quot;stringStartsWith&quot;:true,&quot;timezone&quot;:true,&quot;url&quot;:true,&quot;urlSearchParams&quot;:true,&quot;userTimingEntries&quot;:true,&quot;userTimingMark&quot;:true,&quot;weakmap&quot;:true},&quot;timestamp&quot;:1526030584928},{&quot;resourceTimings&quot;:[{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1634.0000000054715,&quot;domainLookupStart&quot;:1634.0000000054715,&quot;domainLookupEnd&quot;:1634.0000000054715,&quot;connectStart&quot;:1634.0000000054715,&quot;connectEnd&quot;:1634.0000000054715,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1636.5000000077998,&quot;responseStart&quot;:1636.5000000077998,&quot;responseEnd&quot;:1648.0000000010477,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:23122,&quot;decodedBodySize&quot;:113522,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-35bdc21c9cfe5499e25ab7ce9d31a2cc.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1634.0000000054715,&quot;duration&quot;:13.999999995576218},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1634.0000000054715,&quot;domainLookupStart&quot;:1649.4999999995343,&quot;domainLookupEnd&quot;:1653.5000000003492,&quot;connectStart&quot;:1653.5000000003492,&quot;connectEnd&quot;:1657.5000000011642,&quot;secureConnectionStart&quot;:1654.500000004191,&quot;requestStart&quot;:1665.500000002794,&quot;responseStart&quot;:1666.5000000066357,&quot;responseEnd&quot;:1671.0000000020955,&quot;transferSize&quot;:479,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://avatars1.githubusercontent.com/u/${actorID}?s=40&amp;v=4&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1634.0000000054715,&quot;duration&quot;:36.999999996623956},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1634.0000000054715,&quot;domainLookupStart&quot;:1634.0000000054715,&quot;domainLookupEnd&quot;:1634.0000000054715,&quot;connectStart&quot;:1634.0000000054715,&quot;connectEnd&quot;:1634.0000000054715,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1638.5000000009313,&quot;responseStart&quot;:1638.5000000009313,&quot;responseEnd&quot;:1649.0000000048894,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:94138,&quot;decodedBodySize&quot;:402005,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-53c9bcdc66bd65746c42e29457a4e2ab.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1634.0000000054715,&quot;duration&quot;:14.999999999417923},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1892.0000000071013,&quot;domainLookupStart&quot;:1892.0000000071013,&quot;domainLookupEnd&quot;:1892.0000000071013,&quot;connectStart&quot;:1892.0000000071013,&quot;connectEnd&quot;:1892.0000000071013,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1892.0000000071013,&quot;responseStart&quot;:1892.0000000071013,&quot;responseEnd&quot;:1892.0000000071013,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:88465,&quot;decodedBodySize&quot;:253180,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-644046793a9a820484b09b18e7389918.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1892.0000000071013,&quot;duration&quot;:0},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1898.0000000010477,&quot;domainLookupStart&quot;:1898.0000000010477,&quot;domainLookupEnd&quot;:1898.0000000010477,&quot;connectStart&quot;:1898.0000000010477,&quot;connectEnd&quot;:1898.0000000010477,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1899.4999999995343,&quot;responseStart&quot;:1899.4999999995343,&quot;responseEnd&quot;:1906.0000000026776,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:136371,&quot;decodedBodySize&quot;:476606,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-85fc10e5f867231156677d344e74faa4.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1898.0000000010477,&quot;duration&quot;:8.000000001629815},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2523.0000000010477,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2869.9999999953434,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2523.0000000010477,&quot;duration&quot;:346.99999999429565},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2543.0000000051223,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2869.9999999953434,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2543.0000000051223,&quot;duration&quot;:326.9999999902211},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2552.9999999998836,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:3448.000000003958,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2Fsss&amp;dimensions[title]=${actorLogin}%2Fsss&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x319&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526030585073&amp;dimensions[request_id]=0780%3A79F6%3A610673%3A8D8942%3A5AF560F7&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;dimensions[user_id]=${actorID}&amp;dimensions[user_login]=${actorLogin}&amp;dimensions[repository_id]=133018874&amp;dimensions[repository_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_public]=true&amp;dimensions[repository_is_fork]=false&amp;dimensions[repository_network_root_id]=133018874&amp;dimensions[repository_network_root_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_explore_github_marketplace_ci_cta_shown]=true&amp;&amp;measures[performance_timing]=1-1535-1535--2103-2095-2095-1556-1535-1535-1535---0-1535-7-1030-1760-1537--1536-1536&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2552.9999999998836,&quot;duration&quot;:895.0000000040745}],&quot;timestamp&quot;:1526030585988},{&quot;navigationTimings&quot;:[{&quot;unloadEventStart&quot;:1536.0000000073342,&quot;unloadEventEnd&quot;:1536.0000000073342,&quot;domInteractive&quot;:2095.000000001164,&quot;domContentLoadedEventStart&quot;:2095.000000001164,&quot;domContentLoadedEventEnd&quot;:2103.000000002794,&quot;domComplete&quot;:3448.000000003958,&quot;loadEventStart&quot;:3448.000000003958,&quot;loadEventEnd&quot;:3449.9999999970896,&quot;type&quot;:&quot;navigate&quot;,&quot;redirectCount&quot;:1,&quot;initiatorType&quot;:&quot;navigation&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:6.999999997788109,&quot;redirectEnd&quot;:1535.0000000034925,&quot;fetchStart&quot;:1535.0000000034925,&quot;domainLookupStart&quot;:1535.0000000034925,&quot;domainLookupEnd&quot;:1535.0000000034925,&quot;connectStart&quot;:1535.0000000034925,&quot;connectEnd&quot;:1535.0000000034925,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1029.9999999988358,&quot;responseStart&quot;:1536.999999996624,&quot;responseEnd&quot;:1759.9999999947613,&quot;transferSize&quot;:18913,&quot;encodedBodySize&quot;:13576,&quot;decodedBodySize&quot;:46728,&quot;name&quot;:&quot;https://github.com/repositories&quot;,&quot;entryType&quot;:&quot;navigation&quot;,&quot;startTime&quot;:0,&quot;duration&quot;:3449.9999999970896}],&quot;timestamp&quot;:1526030585989}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click the Repository Setting" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Redirect to Respository Setting page" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${actorLogin}/${repositoryName}/settings?_pjax=%23js-repo-pjax-container</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">token</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//form[contains(@action,&apos;delete&apos;)]/input[@name=&apos;authenticity_token&apos;]/@value</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Page Text" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1499275331">Settings</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="page_view" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2Fddd%2Fsettings&amp;dimensions[title]=Options&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x183&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526032533179&amp;dimensions[request_id]=0780%3A422F%3A19BB93%3A255F23%3A5AF56762&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;dimensions[user_id]=${actorID}&amp;dimensions[user_login]=${actorLogin}&amp;dimensions[repository_id]=133021996&amp;dimensions[repository_nwo]=${actorLogin}%2Fddd&amp;dimensions[repository_public]=true&amp;dimensions[repository_is_fork]=false&amp;dimensions[repository_network_root_id]=133021996&amp;dimensions[repository_network_root_nwo]=${actorLogin}%2Fddd&amp;dimensions[repository_explore_github_marketplace_ci_cta_shown]=true&amp;&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;requestUrl&quot;:&quot;https://github.com/${actorLogin}/${repositoryName}/settings?_pjax=%23js-repo-pjax-container&quot;,&quot;pjaxDuration&quot;:589,&quot;timestamp&quot;:1526275538826}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delete Repository and input Repository Name" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Respository" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="_method" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">delete</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_method</stringProp>
                    </elementProp>
                    <elementProp name="authenticity_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">authenticity_token</stringProp>
                    </elementProp>
                    <elementProp name="verify" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${repositoryName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">verify</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
                <stringProp name="HTTPSampler.path">${actorLogin}/${repositoryName}/settings/delete</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-298799456">successfully deleted</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Redirect to initial page" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">signOutToken</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//form[@class=&apos;logout-form&apos;]/input[@name=&apos;authenticity_token&apos;]/@value</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">completeWSLink</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//link[@rel=&apos;web-socket&apos;]/@href</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">String completeWSLink = vars.get(&quot;completeWSLink&quot;);
String WSPath = completeWSLink.split(&quot;live.github.com/&quot;)[1];

vars.put(&quot;WSPath&quot;, WSPath);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="collect" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=786006260&amp;t=event&amp;ni=1&amp;_s=1&amp;dl=https%3A%2F%2Fgithub.com%2Fdashboard&amp;ul=en-us&amp;de=UTF-8&amp;dt=(masked)&amp;sd=24-bit&amp;sr=1360x857&amp;vp=1343x270&amp;je=0&amp;ec=Hello%20World&amp;ea=linkview&amp;el=Viewed%20Hello%20World&amp;_u=SCCAAEABM~&amp;jid=&amp;cid=194624480.1476950947&amp;tid=UA-3769691-2&amp;cd1=Logged%20In&amp;z=1672074900</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">collect</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="collect" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=786006260&amp;t=event&amp;ni=1&amp;_s=2&amp;dl=https%3A%2F%2Fgithub.com%2Fdashboard&amp;ul=en-us&amp;de=UTF-8&amp;dt=(masked)&amp;sd=24-bit&amp;sr=1360x857&amp;vp=1343x270&amp;je=0&amp;ec=Dashboard&amp;ea=load%20broadcast&amp;el=Custom%20domains%20on%20GitHub%20Pages%20gain%20support%20for%20HTTPS&amp;_u=SCCAAEABM~&amp;jid=&amp;cid=194624480.1476950947&amp;tid=UA-3769691-2&amp;cd1=Logged%20In&amp;z=352556349</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">collect</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="page_view" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[title]=GitHub&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2Fddd%2Fsettings&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x270&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526032759214&amp;dimensions[request_id]=0780%3A709D%3A62FE6%3A929E0%3A5AF56975&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-903-903--1346-1338-1338-923-903-903-903---0-903-6-420-907-904--904-904&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection" enabled="true">
                <boolProp name="TLS">true</boolProp>
                <stringProp name="server">live.github.com</stringProp>
                <stringProp name="port">443</stringProp>
                <stringProp name="path">${WSPath}</stringProp>
              </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Single Write Sampler" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <boolProp name="binaryPayload">false</boolProp>
                <stringProp name="requestData">subscribe:notification-changed:26293247</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">40</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;features&quot;:{&quot;beacon&quot;:true,&quot;classlist&quot;:true,&quot;classlistMultiArg&quot;:true,&quot;closest&quot;:true,&quot;customElements&quot;:true,&quot;customEvent&quot;:true,&quot;fetch&quot;:true,&quot;highResolutionTime&quot;:true,&quot;matchesSelector&quot;:true,&quot;promises&quot;:true,&quot;stringEndsWith&quot;:true,&quot;stringStartsWith&quot;:true,&quot;timezone&quot;:true,&quot;url&quot;:true,&quot;urlSearchParams&quot;:true,&quot;userTimingEntries&quot;:true,&quot;userTimingMark&quot;:true,&quot;weakmap&quot;:true},&quot;timestamp&quot;:1526032759059},{&quot;resourceTimings&quot;:[{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:997.0000000030268,&quot;domainLookupStart&quot;:997.0000000030268,&quot;domainLookupEnd&quot;:997.0000000030268,&quot;connectStart&quot;:997.0000000030268,&quot;connectEnd&quot;:997.0000000030268,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1001.9999999931315,&quot;responseStart&quot;:1002.9999999969732,&quot;responseEnd&quot;:1008.0000000016298,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:23122,&quot;decodedBodySize&quot;:113522,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-35bdc21c9cfe5499e25ab7ce9d31a2cc.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:997.0000000030268,&quot;duration&quot;:10.999999998603016},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:997.0000000030268,&quot;domainLookupStart&quot;:997.0000000030268,&quot;domainLookupEnd&quot;:997.0000000030268,&quot;connectStart&quot;:997.0000000030268,&quot;connectEnd&quot;:997.0000000030268,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1005.4999999993015,&quot;responseStart&quot;:1006.5000000031432,&quot;responseEnd&quot;:1014.9999999994179,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:94138,&quot;decodedBodySize&quot;:402005,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-53c9bcdc66bd65746c42e29457a4e2ab.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:997.0000000030268,&quot;duration&quot;:17.999999996391125},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:998.0000000068685,&quot;domainLookupStart&quot;:998.0000000068685,&quot;domainLookupEnd&quot;:998.0000000068685,&quot;connectStart&quot;:998.0000000068685,&quot;connectEnd&quot;:998.0000000068685,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:998.0000000068685,&quot;responseStart&quot;:998.0000000068685,&quot;responseEnd&quot;:998.0000000068685,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:88465,&quot;decodedBodySize&quot;:253180,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-644046793a9a820484b09b18e7389918.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:998.0000000068685,&quot;duration&quot;:0},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:998.0000000068685,&quot;domainLookupStart&quot;:1008.4999999962747,&quot;domainLookupEnd&quot;:1018.5000000055879,&quot;connectStart&quot;:1018.5000000055879,&quot;connectEnd&quot;:1027.4999999965075,&quot;secureConnectionStart&quot;:1020.4999999987194,&quot;requestStart&quot;:1027.4999999965075,&quot;responseStart&quot;:1036.500000001979,&quot;responseEnd&quot;:1044.9999999982538,&quot;transferSize&quot;:479,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://avatars1.githubusercontent.com/u/${actorID}?s=40&amp;v=4&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:998.0000000068685,&quot;duration&quot;:46.999999991385266},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:998.0000000068685,&quot;domainLookupStart&quot;:998.0000000068685,&quot;domainLookupEnd&quot;:998.0000000068685,&quot;connectStart&quot;:998.0000000068685,&quot;connectEnd&quot;:998.0000000068685,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1012.4999999970896,&quot;responseStart&quot;:1012.4999999970896,&quot;responseEnd&quot;:1033.9999999996508,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:136371,&quot;decodedBodySize&quot;:476606,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-85fc10e5f867231156677d344e74faa4.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:998.0000000068685,&quot;duration&quot;:35.99999999278225},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1918.0000000051223,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2312.000000005355,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1918.0000000051223,&quot;duration&quot;:394.00000000023283},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1927.9999999998836,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2312.999999994645,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1927.9999999998836,&quot;duration&quot;:384.9999999947613},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1948.999999993248,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2312.000000005355,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1948.999999993248,&quot;duration&quot;:363.0000000121072},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1960.9999999956926,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2604.9999999959255,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[title]=GitHub&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2F${repositoryName}%2Fsettings&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x270&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526032759214&amp;dimensions[request_id]=0780%3A709D%3A62FE6%3A929E0%3A5AF56975&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-903-903--1346-1338-1338-923-903-903-903---0-903-6-420-907-904--904-904&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1960.9999999956926,&quot;duration&quot;:644.0000000002328}],&quot;timestamp&quot;:1526032759872},{&quot;navigationTimings&quot;:[{&quot;unloadEventStart&quot;:903.9999999949941,&quot;unloadEventEnd&quot;:903.9999999949941,&quot;domInteractive&quot;:1338.000000003376,&quot;domContentLoadedEventStart&quot;:1338.000000003376,&quot;domContentLoadedEventEnd&quot;:1346.0000000050059,&quot;domComplete&quot;:2605.999999999767,&quot;loadEventStart&quot;:2605.999999999767,&quot;loadEventEnd&quot;:2607.000000003609,&quot;type&quot;:&quot;navigate&quot;,&quot;redirectCount&quot;:1,&quot;initiatorType&quot;:&quot;navigation&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:5.999999993946403,&quot;redirectEnd&quot;:903.0000000057044,&quot;fetchStart&quot;:903.0000000057044,&quot;domainLookupStart&quot;:903.0000000057044,&quot;domainLookupEnd&quot;:903.0000000057044,&quot;connectStart&quot;:903.0000000057044,&quot;connectEnd&quot;:903.0000000057044,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:419.99999999825377,&quot;responseStart&quot;:903.9999999949941,&quot;responseEnd&quot;:907.0000000065193,&quot;transferSize&quot;:16200,&quot;encodedBodySize&quot;:11043,&quot;decodedBodySize&quot;:42670,&quot;name&quot;:&quot;https://github.com/${actorLogin}/${repositoryName}/settings/delete&quot;,&quot;entryType&quot;:&quot;navigation&quot;,&quot;startTime&quot;:0,&quot;duration&quot;:2607.000000003609}],&quot;timestamp&quot;:1526032759872}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Repository" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click New Repository button" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Redirect to New Respository page" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">new</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">createRepositoryToken</stringProp>
                  <stringProp name="HtmlExtractor.expr">#new_repository&gt;input[name=&apos;authenticity_token&apos;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">value</stringProp>
                  <stringProp name="HtmlExtractor.default"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">completeWSLink</stringProp>
                  <stringProp name="HtmlExtractor.expr">link[rel=&apos;web-socket&apos;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">href</stringProp>
                  <stringProp name="HtmlExtractor.default"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">String completeWSLink = vars.get(&quot;completeWSLink&quot;);
String WSPath = completeWSLink.split(&quot;live.github.com/&quot;)[1];

vars.put(&quot;WSPath&quot;, WSPath);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">repositoryNameCheckToken</stringProp>
                  <stringProp name="HtmlExtractor.expr">auto-check</stringProp>
                  <stringProp name="HtmlExtractor.attribute">csrf</stringProp>
                  <stringProp name="HtmlExtractor.default"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Page Text" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1649618413">Create a new repository</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="signature" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="signature" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/settings/billing/payment/signature</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
                <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49590">204</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;hydroEventPayload&quot;:&quot;{\&quot;event_type\&quot;:\&quot;dashboard.click\&quot;,\&quot;payload\&quot;:{\&quot;event_context\&quot;:\&quot;REPOSITORIES\&quot;,\&quot;target\&quot;:\&quot;NEW_REPOSITORY_BUTTON\&quot;,\&quot;dashboard_context\&quot;:\&quot;user\&quot;,\&quot;dashboard_version\&quot;:0,\&quot;user_id\&quot;:${actorID},\&quot;client_id\&quot;:\&quot;1790278635.1476950947\&quot;,\&quot;originating_request_id\&quot;:\&quot;0782:77CA:5C2965:85BFB0:5AF54CC7\&quot;}}&quot;,&quot;hydroEventHmac&quot;:&quot;de6ddc0d50f34740c7c89480eafcd8e192aaf76fed8779a8dcbdbb9fa165538d&quot;,&quot;timestamp&quot;:1526029455407}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="signature" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="signature" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/settings/billing/payment/signature</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="page_view" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[title]=Create%20a%20New%20Repository&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x532&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526029457363&amp;dimensions[request_id]=0780%3A77CA%3A61138B%3A8CDFE1%3A5AF55C8F&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-105-88--1215-1212-1204-574-88-14-13---0---105-566-563-90-563-563&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection" enabled="true">
                <boolProp name="TLS">true</boolProp>
                <stringProp name="server">live.github.com</stringProp>
                <stringProp name="port">443</stringProp>
                <stringProp name="path">${WSPath}</stringProp>
              </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Single Write Sampler" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <boolProp name="binaryPayload">false</boolProp>
                <stringProp name="requestData">subscribe:notification-changed:${actorID}</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Input Repository Name" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html; fragment</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Repository Name" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="authenticity_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${repositoryNameCheckToken}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">authenticity_token</stringProp>
                    </elementProp>
                    <elementProp name="value" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${repositoryName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">value</stringProp>
                    </elementProp>
                    <elementProp name="owner" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${actorLogin}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">owner</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
                <stringProp name="HTTPSampler.path">/repositories/check-name</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Create Repository button" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Repository" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="authenticity_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${createRepositoryToken}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">authenticity_token</stringProp>
                    </elementProp>
                    <elementProp name="owner" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${actorLogin}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">owner</stringProp>
                    </elementProp>
                    <elementProp name="repository[name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${repositoryName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">repository[name]</stringProp>
                    </elementProp>
                    <elementProp name="repository[description]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${formatedDate}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">repository[description]</stringProp>
                    </elementProp>
                    <elementProp name="repository[public]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">repository[public]</stringProp>
                    </elementProp>
                    <elementProp name="repository[auto_init]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">repository[auto_init]</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
                <stringProp name="HTTPSampler.path">repositories</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="393033322">Quick setup</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;

String formatedDate = null;

SimpleDateFormat sdt = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&quot;);
try
{
    formatedDate = sdt.format(new Date());
} catch (Exception e)
{
    log.error(&quot;Something wrong with the date conversion!&quot;);
}
log.info(&quot;The formated date value is: &quot; + formatedDate);

vars.put(&quot;formatedDate&quot;, formatedDate);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Redirect to created Respository page" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${actorLogin}/${repositoryName}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">signOutToken</stringProp>
                  <stringProp name="HtmlExtractor.expr">form[class=&apos;logout-form&apos;]&gt;input[name=&apos;authenticity_token&apos;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">value</stringProp>
                  <stringProp name="HtmlExtractor.default"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">completeWSLink</stringProp>
                  <stringProp name="HtmlExtractor.expr">link[rel=&apos;web-socket&apos;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">href</stringProp>
                  <stringProp name="HtmlExtractor.default"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">String completeWSLink = vars.get(&quot;completeWSLink&quot;);
String WSPath = completeWSLink.split(&quot;live.github.com/&quot;)[1];

vars.put(&quot;WSPath&quot;, WSPath);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="collect" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=196222607&amp;t=event&amp;ni=1&amp;_s=1&amp;dl=https%3A%2F%2Fgithub.com%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Ffiles%2Fdisambiguate&amp;ul=en-us&amp;de=UTF-8&amp;dt=(masked)&amp;sd=24-bit&amp;sr=1360x857&amp;vp=1343x319&amp;je=0&amp;ec=Repository&amp;ea=create&amp;el=target%3AUser%3B%20billing%3Afalse%3B%20repo%3Apublic&amp;_u=SCCAAEABM~&amp;jid=&amp;cid=194624480.1476950947&amp;tid=UA-3769691-2&amp;cd1=Logged%20In&amp;z=412298220</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">collect</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="page_view" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2Fsss&amp;dimensions[title]=${actorLogin}%2Fsss&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x319&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526030585073&amp;dimensions[request_id]=0780%3A79F6%3A610673%3A8D8942%3A5AF560F7&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;dimensions[user_id]=${actorID}&amp;dimensions[user_login]=${actorLogin}&amp;dimensions[repository_id]=133018874&amp;dimensions[repository_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_public]=true&amp;dimensions[repository_is_fork]=false&amp;dimensions[repository_network_root_id]=133018874&amp;dimensions[repository_network_root_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_explore_github_marketplace_ci_cta_shown]=true&amp;&amp;measures[performance_timing]=1-1535-1535--2103-2095-2095-1556-1535-1535-1535---0-1535-7-1030-1760-1537--1536-1536&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection" enabled="true">
                <boolProp name="TLS">true</boolProp>
                <stringProp name="server">live.github.com</stringProp>
                <stringProp name="port">443</stringProp>
                <stringProp name="path">${WSPath}</stringProp>
              </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Single Write Sampler" enabled="true">
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <boolProp name="binaryPayload">false</boolProp>
                <stringProp name="requestData">subscribe:notification-changed:26293247</stringProp>
                <boolProp name="createNewConnection">false</boolProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                    <stringProp name="48626">101</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">40</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;features&quot;:{&quot;beacon&quot;:true,&quot;classlist&quot;:true,&quot;classlistMultiArg&quot;:true,&quot;closest&quot;:true,&quot;customElements&quot;:true,&quot;customEvent&quot;:true,&quot;fetch&quot;:true,&quot;highResolutionTime&quot;:true,&quot;matchesSelector&quot;:true,&quot;promises&quot;:true,&quot;stringEndsWith&quot;:true,&quot;stringStartsWith&quot;:true,&quot;timezone&quot;:true,&quot;url&quot;:true,&quot;urlSearchParams&quot;:true,&quot;userTimingEntries&quot;:true,&quot;userTimingMark&quot;:true,&quot;weakmap&quot;:true},&quot;timestamp&quot;:1526030584928},{&quot;resourceTimings&quot;:[{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1634.0000000054715,&quot;domainLookupStart&quot;:1634.0000000054715,&quot;domainLookupEnd&quot;:1634.0000000054715,&quot;connectStart&quot;:1634.0000000054715,&quot;connectEnd&quot;:1634.0000000054715,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1636.5000000077998,&quot;responseStart&quot;:1636.5000000077998,&quot;responseEnd&quot;:1648.0000000010477,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:23122,&quot;decodedBodySize&quot;:113522,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-35bdc21c9cfe5499e25ab7ce9d31a2cc.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1634.0000000054715,&quot;duration&quot;:13.999999995576218},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1634.0000000054715,&quot;domainLookupStart&quot;:1649.4999999995343,&quot;domainLookupEnd&quot;:1653.5000000003492,&quot;connectStart&quot;:1653.5000000003492,&quot;connectEnd&quot;:1657.5000000011642,&quot;secureConnectionStart&quot;:1654.500000004191,&quot;requestStart&quot;:1665.500000002794,&quot;responseStart&quot;:1666.5000000066357,&quot;responseEnd&quot;:1671.0000000020955,&quot;transferSize&quot;:479,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://avatars1.githubusercontent.com/u/${actorID}?s=40&amp;v=4&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1634.0000000054715,&quot;duration&quot;:36.999999996623956},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1634.0000000054715,&quot;domainLookupStart&quot;:1634.0000000054715,&quot;domainLookupEnd&quot;:1634.0000000054715,&quot;connectStart&quot;:1634.0000000054715,&quot;connectEnd&quot;:1634.0000000054715,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1638.5000000009313,&quot;responseStart&quot;:1638.5000000009313,&quot;responseEnd&quot;:1649.0000000048894,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:94138,&quot;decodedBodySize&quot;:402005,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-53c9bcdc66bd65746c42e29457a4e2ab.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1634.0000000054715,&quot;duration&quot;:14.999999999417923},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1892.0000000071013,&quot;domainLookupStart&quot;:1892.0000000071013,&quot;domainLookupEnd&quot;:1892.0000000071013,&quot;connectStart&quot;:1892.0000000071013,&quot;connectEnd&quot;:1892.0000000071013,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1892.0000000071013,&quot;responseStart&quot;:1892.0000000071013,&quot;responseEnd&quot;:1892.0000000071013,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:88465,&quot;decodedBodySize&quot;:253180,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-644046793a9a820484b09b18e7389918.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1892.0000000071013,&quot;duration&quot;:0},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1898.0000000010477,&quot;domainLookupStart&quot;:1898.0000000010477,&quot;domainLookupEnd&quot;:1898.0000000010477,&quot;connectStart&quot;:1898.0000000010477,&quot;connectEnd&quot;:1898.0000000010477,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1899.4999999995343,&quot;responseStart&quot;:1899.4999999995343,&quot;responseEnd&quot;:1906.0000000026776,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:136371,&quot;decodedBodySize&quot;:476606,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-85fc10e5f867231156677d344e74faa4.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1898.0000000010477,&quot;duration&quot;:8.000000001629815},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2523.0000000010477,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2869.9999999953434,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2523.0000000010477,&quot;duration&quot;:346.99999999429565},{&quot;initiatorType&quot;:&quot;beacon&quot;,&quot;nextHopProtocol&quot;:&quot;hq&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2543.0000000051223,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2869.9999999953434,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://www.google-analytics.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2543.0000000051223,&quot;duration&quot;:326.9999999902211},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2552.9999999998836,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:3448.000000003958,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F${actorLogin}%2Fsss&amp;dimensions[title]=${actorLogin}%2Fsss&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x319&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526030585073&amp;dimensions[request_id]=0780%3A79F6%3A610673%3A8D8942%3A5AF560F7&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;dimensions[user_id]=${actorID}&amp;dimensions[user_login]=${actorLogin}&amp;dimensions[repository_id]=133018874&amp;dimensions[repository_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_public]=true&amp;dimensions[repository_is_fork]=false&amp;dimensions[repository_network_root_id]=133018874&amp;dimensions[repository_network_root_nwo]=${actorLogin}%2Fsss&amp;dimensions[repository_explore_github_marketplace_ci_cta_shown]=true&amp;&amp;measures[performance_timing]=1-1535-1535--2103-2095-2095-1556-1535-1535-1535---0-1535-7-1030-1760-1537--1536-1536&amp;&amp;dimensions[actor_id]=${actorID}&amp;dimensions[actor_login]=${actorLogin}&amp;dimensions[actor_hash]=d0700a3ad936f20a7e0408e797ef405d9c076c7e5883e5c6df7827cfbfb59caa&amp;dimensions[cid]=1790278635.1476950947&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2552.9999999998836,&quot;duration&quot;:895.0000000040745}],&quot;timestamp&quot;:1526030585988},{&quot;navigationTimings&quot;:[{&quot;unloadEventStart&quot;:1536.0000000073342,&quot;unloadEventEnd&quot;:1536.0000000073342,&quot;domInteractive&quot;:2095.000000001164,&quot;domContentLoadedEventStart&quot;:2095.000000001164,&quot;domContentLoadedEventEnd&quot;:2103.000000002794,&quot;domComplete&quot;:3448.000000003958,&quot;loadEventStart&quot;:3448.000000003958,&quot;loadEventEnd&quot;:3449.9999999970896,&quot;type&quot;:&quot;navigate&quot;,&quot;redirectCount&quot;:1,&quot;initiatorType&quot;:&quot;navigation&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:6.999999997788109,&quot;redirectEnd&quot;:1535.0000000034925,&quot;fetchStart&quot;:1535.0000000034925,&quot;domainLookupStart&quot;:1535.0000000034925,&quot;domainLookupEnd&quot;:1535.0000000034925,&quot;connectStart&quot;:1535.0000000034925,&quot;connectEnd&quot;:1535.0000000034925,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1029.9999999988358,&quot;responseStart&quot;:1536.999999996624,&quot;responseEnd&quot;:1759.9999999947613,&quot;transferSize&quot;:18913,&quot;encodedBodySize&quot;:13576,&quot;decodedBodySize&quot;:46728,&quot;name&quot;:&quot;https://github.com/repositories&quot;,&quot;entryType&quot;:&quot;navigation&quot;,&quot;startTime&quot;:0,&quot;duration&quot;:3449.9999999970896}],&quot;timestamp&quot;:1526030585989}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SignOut" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Sign out" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logout" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="authenticity_token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${signOutToken}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">authenticity_token</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf8</stringProp>
              <stringProp name="HTTPSampler.path">logout</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Redirect to initial page" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Redirect to initial page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="page_view" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[title]=The%20world%E2%80%99s%20leading%20software%20development%20platform%20%C2%B7%20GitHub&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x236&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526279270913&amp;dimensions[request_id]=0780%3A77C8%3A3AD83D%3A570863%3A5AF92C63&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-1937-1937--3107-3098-3098-1950-1937-1937-1937---0-1937-8-1634-2186-1941--1938-1938&amp;&amp;&amp;dimensions[cid]=1790278635.1476950947</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="stats" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;features&quot;:{&quot;beacon&quot;:true,&quot;classlist&quot;:true,&quot;classlistMultiArg&quot;:true,&quot;closest&quot;:true,&quot;customElements&quot;:true,&quot;customEvent&quot;:true,&quot;fetch&quot;:true,&quot;highResolutionTime&quot;:true,&quot;matchesSelector&quot;:true,&quot;promises&quot;:true,&quot;stringEndsWith&quot;:true,&quot;stringStartsWith&quot;:true,&quot;timezone&quot;:true,&quot;url&quot;:true,&quot;urlSearchParams&quot;:true,&quot;userTimingEntries&quot;:true,&quot;userTimingMark&quot;:true,&quot;weakmap&quot;:true},&quot;timestamp&quot;:1526279270762},{&quot;downloadedBundles&quot;:[&quot;site.css&quot;],&quot;timestamp&quot;:1526279271154},{&quot;resourceTimings&quot;:[{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1960.0000000209548,&quot;domainLookupStart&quot;:1960.0000000209548,&quot;domainLookupEnd&quot;:1960.0000000209548,&quot;connectStart&quot;:1960.0000000209548,&quot;connectEnd&quot;:1960.0000000209548,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1969.5000000065193,&quot;responseStart&quot;:1971.4999999850988,&quot;responseEnd&quot;:1988.0000000121072,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:23478,&quot;decodedBodySize&quot;:115019,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-23c9e7262eee71bc6f67f6950190a162.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1960.0000000209548,&quot;duration&quot;:27.999999991152436},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1960.0000000209548,&quot;domainLookupStart&quot;:1960.0000000209548,&quot;domainLookupEnd&quot;:1960.0000000209548,&quot;connectStart&quot;:1960.0000000209548,&quot;connectEnd&quot;:1960.0000000209548,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1999.0000000107102,&quot;responseStart&quot;:2006.9999999832362,&quot;responseEnd&quot;:2024.0000000339933,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:20922,&quot;decodedBodySize&quot;:20922,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/airbnb-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1960.0000000209548,&quot;duration&quot;:64.00000001303852},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1960.0000000209548,&quot;domainLookupStart&quot;:1960.0000000209548,&quot;domainLookupEnd&quot;:1960.0000000209548,&quot;connectStart&quot;:1960.0000000209548,&quot;connectEnd&quot;:1960.0000000209548,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1970.499999995809,&quot;responseStart&quot;:1972.5000000325963,&quot;responseEnd&quot;:1982.0000000181608,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:46565,&quot;decodedBodySize&quot;:46565,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/site-7472e7b4603d4095447d49d428375ab8.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1960.0000000209548,&quot;duration&quot;:21.999999997206032},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1960.0000000209548,&quot;domainLookupStart&quot;:1960.0000000209548,&quot;domainLookupEnd&quot;:1960.0000000209548,&quot;connectStart&quot;:1960.0000000209548,&quot;connectEnd&quot;:1960.0000000209548,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2016.0000000032596,&quot;responseStart&quot;:2016.9999999925494,&quot;responseEnd&quot;:2043.0000000051223,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:13020,&quot;decodedBodySize&quot;:13020,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/sap-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1960.0000000209548,&quot;duration&quot;:82.99999998416752},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1960.0000000209548,&quot;domainLookupStart&quot;:1960.0000000209548,&quot;domainLookupEnd&quot;:1960.0000000209548,&quot;connectStart&quot;:1960.0000000209548,&quot;connectEnd&quot;:1960.0000000209548,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2016.0000000032596,&quot;responseStart&quot;:2018.0000000400469,&quot;responseEnd&quot;:2043.999999994412,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:8466,&quot;decodedBodySize&quot;:8466,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/ibm-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1960.0000000209548,&quot;duration&quot;:83.9999999734573},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1960.0000000209548,&quot;domainLookupStart&quot;:1960.0000000209548,&quot;domainLookupEnd&quot;:1960.0000000209548,&quot;connectStart&quot;:1960.0000000209548,&quot;connectEnd&quot;:1960.0000000209548,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2017.5000000162981,&quot;responseStart&quot;:2018.500000005588,&quot;responseEnd&quot;:2044.9999999837019,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:7378,&quot;decodedBodySize&quot;:7378,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/google-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1960.0000000209548,&quot;duration&quot;:84.9999999627471},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1960.0000000209548,&quot;domainLookupStart&quot;:1960.0000000209548,&quot;domainLookupEnd&quot;:1960.0000000209548,&quot;connectStart&quot;:1960.0000000209548,&quot;connectEnd&quot;:1960.0000000209548,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1991.0000000381842,&quot;responseStart&quot;:1992.000000027474,&quot;responseEnd&quot;:2002.0000000367872,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:16457,&quot;decodedBodySize&quot;:16457,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/tenyears/10.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1960.0000000209548,&quot;duration&quot;:42.000000015832484},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1960.0000000209548,&quot;domainLookupStart&quot;:1960.0000000209548,&quot;domainLookupEnd&quot;:1960.0000000209548,&quot;connectStart&quot;:1960.0000000209548,&quot;connectEnd&quot;:1960.0000000209548,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1968.9999999827705,&quot;responseStart&quot;:1972.0000000088476,&quot;responseEnd&quot;:1991.0000000381842,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:94028,&quot;decodedBodySize&quot;:400888,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-8b5319d072aa221393f06aa08cd8a12c.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1960.0000000209548,&quot;duration&quot;:31.000000017229468},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1961.0000000102445,&quot;domainLookupStart&quot;:1961.0000000102445,&quot;domainLookupEnd&quot;:1961.0000000102445,&quot;connectStart&quot;:1961.0000000102445,&quot;connectEnd&quot;:1961.0000000102445,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2017.5000000162981,&quot;responseStart&quot;:2018.500000005588,&quot;responseEnd&quot;:2044.9999999837019,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:24740,&quot;decodedBodySize&quot;:24740,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/paypal-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1961.0000000102445,&quot;duration&quot;:83.9999999734573},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1961.0000000102445,&quot;domainLookupStart&quot;:1961.0000000102445,&quot;domainLookupEnd&quot;:1961.0000000102445,&quot;connectStart&quot;:1961.0000000102445,&quot;connectEnd&quot;:1961.0000000102445,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2021.0000000079162,&quot;responseStart&quot;:2021.999999997206,&quot;responseEnd&quot;:2053.0000000144355,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:19335,&quot;decodedBodySize&quot;:19335,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/bloomberg-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1961.0000000102445,&quot;duration&quot;:92.00000000419095},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1961.0000000102445,&quot;domainLookupStart&quot;:1961.0000000102445,&quot;domainLookupEnd&quot;:1961.0000000102445,&quot;connectStart&quot;:1961.0000000102445,&quot;connectEnd&quot;:1961.0000000102445,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2018.0000000400469,&quot;responseStart&quot;:2020.0000000186265,&quot;responseEnd&quot;:2053.0000000144355,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:19454,&quot;decodedBodySize&quot;:19454,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/spotify-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1961.0000000102445,&quot;duration&quot;:92.00000000419095},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1961.0000000102445,&quot;domainLookupStart&quot;:1961.0000000102445,&quot;domainLookupEnd&quot;:1961.0000000102445,&quot;connectStart&quot;:1961.0000000102445,&quot;connectEnd&quot;:1961.0000000102445,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2025.4999999888241,&quot;responseStart&quot;:2027.5000000256114,&quot;responseEnd&quot;:2054.0000000037253,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:20681,&quot;decodedBodySize&quot;:20681,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/swift-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1961.0000000102445,&quot;duration&quot;:92.99999999348074},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1961.0000000102445,&quot;domainLookupStart&quot;:1961.0000000102445,&quot;domainLookupEnd&quot;:1961.0000000102445,&quot;connectStart&quot;:1961.0000000102445,&quot;connectEnd&quot;:1961.0000000102445,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2027.0000000018626,&quot;responseStart&quot;:2027.9999999911524,&quot;responseEnd&quot;:2054.999999993015,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:1472,&quot;decodedBodySize&quot;:1472,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/facebook-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1961.0000000102445,&quot;duration&quot;:93.99999998277053},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1961.0000000102445,&quot;domainLookupStart&quot;:1961.0000000102445,&quot;domainLookupEnd&quot;:1961.0000000102445,&quot;connectStart&quot;:1961.0000000102445,&quot;connectEnd&quot;:1961.0000000102445,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2023.5000000102445,&quot;responseStart&quot;:2031.4999999827705,&quot;responseEnd&quot;:2054.999999993015,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:21236,&quot;decodedBodySize&quot;:21236,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/node-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1961.0000000102445,&quot;duration&quot;:93.99999998277053},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1961.0000000102445,&quot;domainLookupStart&quot;:1961.0000000102445,&quot;domainLookupEnd&quot;:1961.0000000102445,&quot;connectStart&quot;:1961.0000000102445,&quot;connectEnd&quot;:1961.0000000102445,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2020.4999999841675,&quot;responseStart&quot;:2028.5000000149012,&quot;responseEnd&quot;:2056.0000000405125,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:17194,&quot;decodedBodySize&quot;:17194,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/nasa-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1961.0000000102445,&quot;duration&quot;:95.00000003026798},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1961.0000000102445,&quot;domainLookupStart&quot;:1961.0000000102445,&quot;domainLookupEnd&quot;:1961.0000000102445,&quot;connectStart&quot;:1961.0000000102445,&quot;connectEnd&quot;:1961.0000000102445,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2020.0000000186265,&quot;responseStart&quot;:2029.00000003865,&quot;responseEnd&quot;:2056.0000000405125,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:19351,&quot;decodedBodySize&quot;:19351,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/walmart-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1961.0000000102445,&quot;duration&quot;:95.00000003026798},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1961.0000000102445,&quot;domainLookupStart&quot;:1961.0000000102445,&quot;domainLookupEnd&quot;:1961.0000000102445,&quot;connectStart&quot;:1961.0000000102445,&quot;connectEnd&quot;:1961.0000000102445,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2019.4999999948777,&quot;responseStart&quot;:2028.5000000149012,&quot;responseEnd&quot;:2057.0000000298023,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:12242,&quot;decodedBodySize&quot;:31505,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/home-illo-team.svg&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1961.0000000102445,&quot;duration&quot;:96.00000001955777},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1961.0000000102445,&quot;domainLookupStart&quot;:1961.0000000102445,&quot;domainLookupEnd&quot;:1961.0000000102445,&quot;connectStart&quot;:1961.0000000102445,&quot;connectEnd&quot;:1961.0000000102445,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2038.0000000004657,&quot;responseStart&quot;:2038.9999999897555,&quot;responseEnd&quot;:2075.0000000116415,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:1224,&quot;decodedBodySize&quot;:3078,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/home-illo-team-code.svg&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1961.0000000102445,&quot;duration&quot;:114.00000000139698},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1961.9999999995343,&quot;domainLookupStart&quot;:1961.9999999995343,&quot;domainLookupEnd&quot;:1961.9999999995343,&quot;connectStart&quot;:1961.9999999995343,&quot;connectEnd&quot;:1961.9999999995343,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2038.9999999897555,&quot;responseStart&quot;:2040.000000037253,&quot;responseEnd&quot;:2076.999999990221,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:697,&quot;decodedBodySize&quot;:1887,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/home-illo-team-chaos.svg&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1961.9999999995343,&quot;duration&quot;:114.99999999068677},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1961.9999999995343,&quot;domainLookupStart&quot;:1961.9999999995343,&quot;domainLookupEnd&quot;:1961.9999999995343,&quot;connectStart&quot;:1961.9999999995343,&quot;connectEnd&quot;:1961.9999999995343,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2039.5000000135042,&quot;responseStart&quot;:2047.4999999860302,&quot;responseEnd&quot;:2086.0000000102445,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:713,&quot;decodedBodySize&quot;:1856,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/home-illo-team-tools.svg&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1961.9999999995343,&quot;duration&quot;:124.00000001071021},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1961.9999999995343,&quot;domainLookupStart&quot;:1961.9999999995343,&quot;domainLookupEnd&quot;:1961.9999999995343,&quot;connectStart&quot;:1961.9999999995343,&quot;connectEnd&quot;:1961.9999999995343,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2041.0000000265427,&quot;responseStart&quot;:2048.9999999990687,&quot;responseEnd&quot;:2086.9999999995343,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:167023,&quot;decodedBodySize&quot;:167023,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/home-illo-business.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1961.9999999995343,&quot;duration&quot;:125},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2179.999999993015,&quot;domainLookupStart&quot;:2179.999999993015,&quot;domainLookupEnd&quot;:2179.999999993015,&quot;connectStart&quot;:2179.999999993015,&quot;connectEnd&quot;:2179.999999993015,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2353.5000000265427,&quot;responseStart&quot;:2363.500000035856,&quot;responseEnd&quot;:2537.000000011176,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:34463,&quot;decodedBodySize&quot;:34463,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/slackhq.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2179.999999993015,&quot;duration&quot;:357.0000000181608},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2179.999999993015,&quot;domainLookupStart&quot;:2179.999999993015,&quot;domainLookupEnd&quot;:2179.999999993015,&quot;connectStart&quot;:2179.999999993015,&quot;connectEnd&quot;:2179.999999993015,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2353.000000002794,&quot;responseStart&quot;:2364.000000001397,&quot;responseEnd&quot;:2537.000000011176,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:572,&quot;decodedBodySize&quot;:572,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/zenhubio.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2179.999999993015,&quot;duration&quot;:357.0000000181608},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2179.999999993015,&quot;domainLookupStart&quot;:2179.999999993015,&quot;domainLookupEnd&quot;:2179.999999993015,&quot;connectStart&quot;:2179.999999993015,&quot;connectEnd&quot;:2179.999999993015,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2357.499999983702,&quot;responseStart&quot;:2367.499999993015,&quot;responseEnd&quot;:2543.999999994412,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:16630,&quot;decodedBodySize&quot;:16630,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/travis-ci.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2179.999999993015,&quot;duration&quot;:364.000000001397},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2179.999999993015,&quot;domainLookupStart&quot;:2179.999999993015,&quot;domainLookupEnd&quot;:2179.999999993015,&quot;connectStart&quot;:2179.999999993015,&quot;connectEnd&quot;:2179.999999993015,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2357.000000018161,&quot;responseStart&quot;:2367.000000027474,&quot;responseEnd&quot;:2543.999999994412,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:8973,&quot;decodedBodySize&quot;:8973,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/atom.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2179.999999993015,&quot;duration&quot;:364.000000001397},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2179.999999993015,&quot;domainLookupStart&quot;:2179.999999993015,&quot;domainLookupEnd&quot;:2179.999999993015,&quot;connectStart&quot;:2179.999999993015,&quot;connectEnd&quot;:2179.999999993015,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2353.000000002794,&quot;responseStart&quot;:2372.0000000321306,&quot;responseEnd&quot;:2544.999999983702,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:65515,&quot;decodedBodySize&quot;:65515,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/circleci.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2179.999999993015,&quot;duration&quot;:364.9999999906868},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2179.999999993015,&quot;domainLookupStart&quot;:2179.999999993015,&quot;domainLookupEnd&quot;:2179.999999993015,&quot;connectStart&quot;:2179.999999993015,&quot;connectEnd&quot;:2179.999999993015,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2353.9999999920838,&quot;responseStart&quot;:2372.0000000321306,&quot;responseEnd&quot;:2544.999999983702,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:9384,&quot;decodedBodySize&quot;:9384,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/codeship.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2179.999999993015,&quot;duration&quot;:364.9999999906868},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2179.999999993015,&quot;domainLookupStart&quot;:2179.999999993015,&quot;domainLookupEnd&quot;:2179.999999993015,&quot;connectStart&quot;:2179.999999993015,&quot;connectEnd&quot;:2179.999999993015,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2370.999999984633,&quot;responseStart&quot;:2372.0000000321306,&quot;responseEnd&quot;:2544.999999983702,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:76617,&quot;decodedBodySize&quot;:76617,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/codeclimate.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2179.999999993015,&quot;duration&quot;:364.9999999906868},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2179.999999993015,&quot;domainLookupStart&quot;:2179.999999993015,&quot;domainLookupEnd&quot;:2179.999999993015,&quot;connectStart&quot;:2179.999999993015,&quot;connectEnd&quot;:2179.999999993015,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2372.0000000321306,&quot;responseStart&quot;:2373.0000000214204,&quot;responseEnd&quot;:2554.0000000037253,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:114744,&quot;decodedBodySize&quot;:114744,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/developers/ariya.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2179.999999993015,&quot;duration&quot;:374.0000000107102},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2181.0000000405125,&quot;domainLookupStart&quot;:2181.0000000405125,&quot;domainLookupEnd&quot;:2181.0000000405125,&quot;connectStart&quot;:2181.0000000405125,&quot;connectEnd&quot;:2181.0000000405125,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2368.5000000405125,&quot;responseStart&quot;:2377.5000000023283,&quot;responseEnd&quot;:2554.0000000037253,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:28862,&quot;decodedBodySize&quot;:28862,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/developers/kris-nova.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2181.0000000405125,&quot;duration&quot;:372.99999996321276},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2181.0000000405125,&quot;domainLookupStart&quot;:2181.0000000405125,&quot;domainLookupEnd&quot;:2181.0000000405125,&quot;connectStart&quot;:2181.0000000405125,&quot;connectEnd&quot;:2181.0000000405125,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2368.5000000405125,&quot;responseStart&quot;:2377.5000000023283,&quot;responseEnd&quot;:2554.0000000037253,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:34263,&quot;decodedBodySize&quot;:34263,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/developers/yyx990803.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2181.0000000405125,&quot;duration&quot;:372.99999996321276},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2181.0000000405125,&quot;domainLookupStart&quot;:2181.0000000405125,&quot;domainLookupEnd&quot;:2181.0000000405125,&quot;connectStart&quot;:2181.0000000405125,&quot;connectEnd&quot;:2181.0000000405125,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2372.0000000321306,&quot;responseStart&quot;:2374.00000001071,&quot;responseEnd&quot;:2554.0000000037253,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:123956,&quot;decodedBodySize&quot;:123956,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/developers/freakboy3742.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2181.0000000405125,&quot;duration&quot;:372.99999996321276},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2181.0000000405125,&quot;domainLookupStart&quot;:2181.0000000405125,&quot;domainLookupEnd&quot;:2181.0000000405125,&quot;connectStart&quot;:2181.0000000405125,&quot;connectEnd&quot;:2181.0000000405125,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2372.0000000321306,&quot;responseStart&quot;:2374.00000001071,&quot;responseEnd&quot;:2554.0000000037253,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:378670,&quot;decodedBodySize&quot;:378670,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/customers/mailchimp.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2181.0000000405125,&quot;duration&quot;:372.99999996321276},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2181.0000000405125,&quot;domainLookupStart&quot;:2181.0000000405125,&quot;domainLookupEnd&quot;:2181.0000000405125,&quot;connectStart&quot;:2181.0000000405125,&quot;connectEnd&quot;:2181.0000000405125,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2381.500000017695,&quot;responseStart&quot;:2382.500000006985,&quot;responseEnd&quot;:2563.0000000237487,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:331768,&quot;decodedBodySize&quot;:331768,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/customers/mapbox.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2181.0000000405125,&quot;duration&quot;:381.9999999832362},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2188.0000000237487,&quot;domainLookupStart&quot;:2188.0000000237487,&quot;domainLookupEnd&quot;:2188.0000000237487,&quot;connectStart&quot;:2188.0000000237487,&quot;connectEnd&quot;:2188.0000000237487,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2381.999999983236,&quot;responseStart&quot;:2390.00000001397,&quot;responseEnd&quot;:2563.0000000237487,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:13933,&quot;decodedBodySize&quot;:13933,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/developers/jessfraz.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2188.0000000237487,&quot;duration&quot;:375},{&quot;initiatorType&quot;:&quot;css&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2228.000000002794,&quot;domainLookupStart&quot;:2228.000000002794,&quot;domainLookupEnd&quot;:2228.000000002794,&quot;connectStart&quot;:2228.000000002794,&quot;connectEnd&quot;:2228.000000002794,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2395.0000000186265,&quot;responseStart&quot;:2396.0000000079162,&quot;responseEnd&quot;:2563.0000000237487,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:4564,&quot;decodedBodySize&quot;:26073,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/heroes/simple-codelines.svg&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2228.000000002794,&quot;duration&quot;:335.00000002095476},{&quot;initiatorType&quot;:&quot;css&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2230.000000039581,&quot;domainLookupStart&quot;:2230.000000039581,&quot;domainLookupEnd&quot;:2230.000000039581,&quot;connectStart&quot;:2230.000000039581,&quot;connectEnd&quot;:2230.000000039581,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2405.4999999934807,&quot;responseStart&quot;:2405.4999999934807,&quot;responseEnd&quot;:2581.9999999948777,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:13360,&quot;decodedBodySize&quot;:13360,&quot;name&quot;:&quot;https://assets-cdn.github.com/static/fonts/roboto/roboto-light.woff&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2230.000000039581,&quot;duration&quot;:351.9999999552965},{&quot;initiatorType&quot;:&quot;css&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2231.000000028871,&quot;domainLookupStart&quot;:2231.000000028871,&quot;domainLookupEnd&quot;:2231.000000028871,&quot;connectStart&quot;:2231.000000028871,&quot;connectEnd&quot;:2231.000000028871,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2471.000000019558,&quot;responseStart&quot;:2471.000000019558,&quot;responseEnd&quot;:2711.0000000102445,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:13308,&quot;decodedBodySize&quot;:13308,&quot;name&quot;:&quot;https://assets-cdn.github.com/static/fonts/roboto/roboto-regular.woff&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2231.000000028871,&quot;duration&quot;:479.99999998137355},{&quot;initiatorType&quot;:&quot;css&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2239.000000001397,&quot;domainLookupStart&quot;:2239.000000001397,&quot;domainLookupEnd&quot;:2239.000000001397,&quot;connectStart&quot;:2239.000000001397,&quot;connectEnd&quot;:2239.000000001397,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2478.9999999920838,&quot;responseStart&quot;:2478.9999999920838,&quot;responseEnd&quot;:2720.000000030268,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:13248,&quot;decodedBodySize&quot;:13248,&quot;name&quot;:&quot;https://assets-cdn.github.com/static/fonts/roboto/roboto-medium.woff&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2239.000000001397,&quot;duration&quot;:481.000000028871},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2848.999999987427,&quot;domainLookupStart&quot;:2848.999999987427,&quot;domainLookupEnd&quot;:2848.999999987427,&quot;connectStart&quot;:2848.999999987427,&quot;connectEnd&quot;:2848.999999987427,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2874.500000034459,&quot;responseStart&quot;:2875.5000000237487,&quot;responseEnd&quot;:2900.000000023283,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:88454,&quot;decodedBodySize&quot;:253009,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-69305c61e4ce67cdef4a70845fc0e959.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2848.999999987427,&quot;duration&quot;:51.00000003585592},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2850.0000000349246,&quot;domainLookupStart&quot;:2850.0000000349246,&quot;domainLookupEnd&quot;:2850.0000000349246,&quot;connectStart&quot;:2850.0000000349246,&quot;connectEnd&quot;:2850.0000000349246,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2874.500000034459,&quot;responseStart&quot;:2876.5000000130385,&quot;responseEnd&quot;:2901.000000012573,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:136552,&quot;decodedBodySize&quot;:477192,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-bed113001abefcd143ae6f67ad18ff59.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2850.0000000349246,&quot;duration&quot;:50.99999997764826},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:3617.000000027474,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:3847.9999999981374,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[title]=The%20world%E2%80%99s%20leading%20software%20development%20platform%20%C2%B7%20GitHub&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Fnew&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%206.3%3B%20Win64%3B%20x64)%20AppleWebKit%2F537.36%20(KHTML%2C%20like%20Gecko)%20Chrome%2F66.0.3359.139%20Safari%2F537.36&amp;dimensions[screen_resolution]=1360x857&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1360x236&amp;dimensions[tz_seconds]=-14400&amp;dimensions[timestamp]=1526279270913&amp;dimensions[request_id]=0780%3A77C8%3A3AD83D%3A570863%3A5AF92C63&amp;dimensions[region_edge]=ap-southeast-1&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-1937-1937--3107-3098-3098-1950-1937-1937-1937---0-1937-8-1634-2186-1941--1938-1938&amp;&amp;&amp;dimensions[cid]=1790278635.1476950947&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:3617.000000027474,&quot;duration&quot;:230.99999997066334}],&quot;timestamp&quot;:1526279271165},{&quot;navigationTimings&quot;:[{&quot;unloadEventStart&quot;:1938.0000000237487,&quot;unloadEventEnd&quot;:1938.0000000237487,&quot;domInteractive&quot;:3097.9999999981374,&quot;domContentLoadedEventStart&quot;:3097.9999999981374,&quot;domContentLoadedEventEnd&quot;:3107.000000018161,&quot;domComplete&quot;:3847.9999999981374,&quot;loadEventStart&quot;:3847.9999999981374,&quot;loadEventEnd&quot;:3850.0000000349246,&quot;type&quot;:&quot;navigate&quot;,&quot;redirectCount&quot;:1,&quot;initiatorType&quot;:&quot;navigation&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:8.000000030733645,&quot;redirectEnd&quot;:1937.000000034459,&quot;fetchStart&quot;:1937.000000034459,&quot;domainLookupStart&quot;:1937.000000034459,&quot;domainLookupEnd&quot;:1937.000000034459,&quot;connectStart&quot;:1937.000000034459,&quot;connectEnd&quot;:1937.000000034459,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1634.0000000200234,&quot;responseStart&quot;:1940.999999991618,&quot;responseEnd&quot;:2185.9999999869615,&quot;transferSize&quot;:19214,&quot;encodedBodySize&quot;:14424,&quot;decodedBodySize&quot;:54475,&quot;name&quot;:&quot;https://github.com/logout&quot;,&quot;entryType&quot;:&quot;navigation&quot;,&quot;startTime&quot;:0,&quot;duration&quot;:3850.0000000349246}],&quot;timestamp&quot;:1526279271172}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">_private/browser/stats</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">results/crudeData.jrl</stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon Metrics Collector" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
          <collectionProp name="metricConnections">
            <collectionProp name="917712290">
              <stringProp name="-1204607085">localhost</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="66952">CPU</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-1383002031">
              <stringProp name="-1204607085">localhost</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-1993889503">Memory</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="506007220">
              <stringProp name="-1204607085">localhost</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="2112896831">Disks I/O</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-1270662015">
              <stringProp name="-1204607085">localhost</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-274342153">Network I/O</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.perfmon.PerfMonCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
